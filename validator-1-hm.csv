issue,title,validator comment,grade,root cause (URL),size
findings-10,Fragmentation fee is not taken if user compensates with newly created position,,Satisfactory,"https://github.com/code-423n4/2024-06-size/blob/main/src/libraries/actions/Compensate.sol#L136,https://github.com/code-423n4/2024-06-size/blob/main/src/libraries/actions/Compensate.sol#L146",82
findings-100,"Repaying an underwater debt is dangerous, as the borrower could lose the repayment cash while still being liquidated if a `liquidateWithReplacement()` is executed before the `repay()`",dangerous race condition,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/Size.sol#L229-L244,113
findings-101,Bad actors can grief users by creating useless loans on their behalf via `Size::compensate`,,Satisfactory,"https://github.com/code-423n4/2024-06-size/blob/main/src/libraries/AccountingLibrary.sol#L103-L127,https://github.com/code-423n4/2024-06-size/blob/main/src/libraries/actions/Compensate.sol#L42-L101",256
findings-102,Users cannot make compensation when the due date is within the minimum tenor period,USDC can be converted to ETH,Unsatisfactory,,106
findings-103,Compensate allows lenders to transfer bad credit positions before an oracle update,appears to be QA,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/RiskLibrary.sol#L95,41
findings-104,Liquidator profit collateral is underestimated due to an inconsistency in units,,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L96-L99,36
findings-105,The borrower can `compensate` their debt using credit with soon-to-be-liquidatable debt,Similar to findings-103 but not quite,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/RiskLibrary.sol#L84-L96,82
findings-106,By only taking into account the liquidatorProfit when calling liquidateWithReplacement() the caller might miss out on profitable liqudations,All terminology appears explicit and purposefuly excludes the borrow token,Unsatisfactory,,32
findings-107,Borrower is not able to compensate his lenders if he is underwater,Seems like a missing feature,Unsatisfactory,,70
findings-108,"Credit value stops growing when the debt is overdue, causing a loss for the lender.","If it continued to grow, it would reduce its likelihood of being repaid",Unsatisfactory,,86
findings-109,"Unhealthy borrower is able to ""withdraw"" most of his borrow tokens",Seems interesting,Satisfactory,"https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/Size.sol#L166-L168,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/Size.sol#L178-L185",58
findings-11,"The initiator should pay the fragmentation fees in the sellCreditMarket function, rather than the lender.",,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/main/src/libraries/actions/SellCreditMarket.sol#L202,47
findings-110,liquidatorReward is calculated with the wrong token leading to incorrect amount of funds being sent to the liquidator,,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L96-L99,86
findings-113,Size liquidation bots might skip profitable liquidations due to the minimum collateral profit check.,All terminology appears explicit and purposefuly excludes the borrow token,Unsatisfactory,,168
findings-114,Protocol is not usable due to incorrect aaveV3 liquidity check,variable pool,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/CapsLibrary.sol#L67-L72,94
findings-115,Wrong math for splitting the collateral in `liquidate` leads to unfair liquidation for borrowers,,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L96-L99,77
findings-116,"Exploit in `liquidateWithReplacement` allows bots to force lenders into repaying their own loans, causing financial loss",,Abstain,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/LiquidateWithReplacement.sol#L47-L93,100
findings-117,Picking a second borrower with 0 APR when calling the `liquidateWithReplacement` by bots leads to no profit for the protocol,QA at most,Unsatisfactory,,82
findings-118,Loss of fees for the `feeRecipient` in case of selling credit market,QA at most,Satisfactory,"https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/AccountingLibrary.sol#L249,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/AccountingLibrary.sol#L256",85
findings-119,Improper Validation in the `BuyCreditMarket::validateBuyCreditMarket` Function Causes Incorrect Reverts When `params.exactAmountIn` is True resulting in an invariant break,QA at most,Satisfactory,"https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/BuyCreditMarket.sol#L91-L93,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/SellCreditMarket.sol#L93-L95",63
findings-12,Debt fragmentation via compensate can DOS liquidation attempts,"QA most likely, but still something to consider",Satisfactory,https://github.com/SizeCredit/size-solidity/blob/fbfe6aa84c2a3ef1ded776cda7a079542a3cdef8/src/libraries/actions/Compensate.sol#L119-L126,226
findings-120,Credit buyers can't use a longer due date than the due date of for sale credit position,Missing feature,Unsatisfactory,,44
findings-123,BuyCreditMarket and SellCreditMarket can revert despite using correct amount of credit that is more than minimumCreditBorrowAToken,incorrect restriction,Satisfactory,"https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/BuyCreditMarket.sol#L91-L93,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/SellCreditMarket.sol#L93-L95",77
findings-124,A user can be in a loan all by himself - being the lender and the borrower of the same loan,,Unsatisfactory,,44
findings-125,Liquidator's reward is significantly lower than it should be,units,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L96-L99,140
findings-126,"In the Compensate function, splitting the original credit position through ""mining new credit"" will never charge a fragmentation fee",no frag fee,Satisfactory,"https://github.com/code-423n4/2024-06-size/blob/main/src/libraries/actions/Compensate.sol#L136,https://github.com/code-423n4/2024-06-size/blob/main/src/libraries/actions/Compensate.sol#L146",138
findings-128,"Swap fees calculation is inconsistent, producing different fees for essentially the same loans",Insufficient proof,Unsatisfactory,,73
findings-129,"User can transfer OVERDUE loans, when he isn't expected to and there are checks that try to prevent that",,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/RiskLibrary.sol#L84-L96,182
findings-13,The `borrowATokenCap` can be bypassed when `deposit` is called by using `multicall`.,QA,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/main/src/libraries/CapsLibrary.sol#L19-L44,254
findings-130,Incorrect calculation of deposit amount using address(this).balance,multicall countermeasure,Unsatisfactory,,37
findings-131,If the executeBuyCreditMarket function and executeSellCreditMarket function generate a credit split during execution without charging a fragmentation fee,no frag  fee in different code,Satisfactory,"https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/BuyCreditMarket.sol#L179-L193,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/SellCreditMarket.sol#L194-L200",87
findings-133,The user's funds may all be used to submit the transaction fee,min check exists,Unsatisfactory,,26
findings-134,latestRoundData() has no check for round completeness,,Unsatisfactory,,70
findings-136,ChainlinkOracle will return the wrong price for asset if underlying aggregator hits minAnswer,best practice,Unsatisfactory,,76
findings-137,Incorrect assumption about params.amount can cause DoS for specific executions,,Satisfactory,"https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/BuyCreditMarket.sol#L91-L93,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/SellCreditMarket.sol#L93-L95",35
findings-138,`AccountingLibrary.getCreditAmountIn()` calculates swap fees incorrectly.,,Satisfactory,"https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/AccountingLibrary.sol#L249,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/AccountingLibrary.sol#L256",93
findings-139,`Liquidate.executeLiquidate()` calculates `liquidatorReward` incorrectly.,,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L96-L99,53
findings-14,Overestimating the credit amount when `buyCreditMarket` is executed due to not properly deducting the swap fee,,Satisfactory,"https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/AccountingLibrary.sol#L249,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/AccountingLibrary.sol#L256",140
findings-140,`Liquidate.executeLiquidate()` calculates `collateralRemainderCap` incorrectly.,,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L105-L108,72
findings-141,`LiquidateWithReplacement.executeLiquidateWithReplacement()` should charge a swap fee from a new borrower.,no fee on replacement,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/LiquidateWithReplacement.sol#L146,51
findings-142,A meaningless liquidity validation for a variable pool,,Unsatisfactory,,67
findings-143,Inconsistent liquidity validation for a variable pool,QA,Satisfactory,"https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/Size.sol#L184,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/Size.sol#L194,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/Size.sol#L243",48
findings-144,The `borrowATokenCap` requirement doesn't work during a multicall.,totalsupply?,Unsatisfactory,,76
findings-145,"While buying/selling credit markets, it might revert when it should work due to the `minimumCreditBorrowAToken` validation.",,Satisfactory,"https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/BuyCreditMarket.sol#L91-L93,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/SellCreditMarket.sol#L93-L95",37
findings-146,Possible revert of buying/selling 100% of credit markets.,QA,Satisfactory,"https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/BuyCreditMarket.sol#L90-L93,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/SellCreditMarket.sol#L86-L89",98
findings-147,A user might repay the wrong borrower.,,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/Size.sol#L229-L244,71
findings-148,`executeLiquidateWithReplacement()` doesn't validate `minimumCreditBorrowAToken` while replacing a debt position.,Replacements should not apply new rules,Unsatisfactory,,39
findings-149,No `minCollateralOut/deadline` validation in `selfLiquidate()`.,no slippage on self liq,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/SelfLiquidate.sol#L34-L54,49
findings-15,`executeBuyCreditMarket` returns the wrong amount of cash and overestimates the amount that needs to be checked in the variable pool,QA,Satisfactory,"https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/Size.sol#L184,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/Size.sol#L194,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/Size.sol#L243",139
findings-150,`executeCompensate()` doesn't charge the `fragmentationFee` for `RESERVED_ID`.,no frag fee,Satisfactory,"https://github.com/code-423n4/2024-06-size/blob/main/src/libraries/actions/Compensate.sol#L136,https://github.com/code-423n4/2024-06-size/blob/main/src/libraries/actions/Compensate.sol#L146",75
findings-151,Unfair calculation logic of protocol profit during liquidation,,Unsatisfactory,,70
findings-152,Sandwich attack on loan fulfillment will temporarily prevent users from accessing their borrowed funds,interesting,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/main/src/libraries/CapsLibrary.sol#L67-L72,63
findings-153,A rogue borrower can split the lender's credit position into multiple positions without paying fragmentation fees,no frag fee,Satisfactory,"https://github.com/code-423n4/2024-06-size/blob/main/src/libraries/actions/Compensate.sol#L136,https://github.com/code-423n4/2024-06-size/blob/main/src/libraries/actions/Compensate.sol#L146",300
findings-155,BorrowOffers with high APR cause DOS in order to grief lenders,,Unsatisfactory,,68
findings-156,Malicious offers can significantly impact the usability of the protocol,,Unsatisfactory,,78
findings-16,`validateSellCreditMarket` and `validateBuyCreditMarket` incorrectly assumes `params.amount` is credit when validating against `minimumCreditBorrowAToken`,incorrect restriction,Satisfactory,"https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/BuyCreditMarket.sol#L91-L93,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/SellCreditMarket.sol#L93-L95",83
findings-17,Incorrectly using `futureValue` instead of `debtInCollateralToken` when calculating `liquidatorReward`,units,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L96-L99,119
findings-18,Users can bypass the borrowAToken cap check by using multicall,maybe abs,Unsatisfactory,,119
findings-19,"When the borrowAToken cap is reached, users may not always be able to repay their debt in some cases due to precision errors",,Abstain,,174
findings-20,No Fragmentation fees paid on credit fragmentation due to partial debt repayment,no frag fee,Satisfactory,"https://github.com/code-423n4/2024-06-size/blob/main/src/libraries/actions/Compensate.sol#L136,https://github.com/code-423n4/2024-06-size/blob/main/src/libraries/actions/Compensate.sol#L146",194
findings-21,Users won't liquidate positions because the logic used to calculate the liquidator's profit is incorrect,units,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L96-L99,148
findings-22,Users can avoid full liquidation by splitting up their debt,"QA most likely, but still something to consider",Satisfactory,https://github.com/SizeCredit/size-solidity/blob/fbfe6aa84c2a3ef1ded776cda7a079542a3cdef8/src/libraries/actions/Compensate.sol#L119-L126,305
findings-23,The protocol cannot collect the full fee when borrowers sell credit without a fragmentation fee.,,Satisfactory,"https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/AccountingLibrary.sol#L249,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/AccountingLibrary.sol#L256",169
findings-24,No fragmentation fee is taken when `compensate` is performed using `RESERVED_ID`.,no frag fee,Satisfactory,"https://github.com/code-423n4/2024-06-size/blob/main/src/libraries/actions/Compensate.sol#L136,https://github.com/code-423n4/2024-06-size/blob/main/src/libraries/actions/Compensate.sol#L146",143
findings-25,"Pausing prevents debt repayment, leading to immediate liquidation if the debt is overdue when unpaused.",Acceptable risk but should be noted regardless,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/main/src/libraries/RiskLibrary.sol#L104-L115,82
findings-26,Lender USDC reward is not converted to collateral token,units,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L96-L99,89
findings-27,Borrow aToken cap can be bypassed by depositing via multicall,QA,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/main/src/libraries/CapsLibrary.sol#L19-L44,82
findings-28,Borrower will not be charged fragmentation fee when creating new credit position when compensating a credit partially,no frag fee,Satisfactory,"https://github.com/code-423n4/2024-06-size/blob/main/src/libraries/actions/Compensate.sol#L136,https://github.com/code-423n4/2024-06-size/blob/main/src/libraries/actions/Compensate.sol#L146",47
findings-29,Rounding against the protocol will result in less rewards,,Unsatisfactory,,43
findings-3,PriceFeed doesn't check min/max price boundaries,,Unsatisfactory,,29
findings-30,Lender can be forced to pay swap and fragmentation fees on claimable credit amounts,,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/main/src/libraries/actions/Claim.sol#L48-L60,32
findings-31,Strategic credit fragmentation by borrower can force lender to get liquidated on their borrow positions,,Unsatisfactory,,98
findings-32,Fragmentation fee not refunded if the claimer is the credit position owner,,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/main/src/libraries/actions/Claim.sol#L48-L60,50
findings-33,Lender can be forced out of existing positions unwillingly if they have an open SELL LMT order,,Unsatisfactory,,69
findings-34,User can bypass `RiskConfig.borrowATokenCap` limit up to 10x times using multicall. Leading to temporary DOS attack,QA,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/main/src/libraries/CapsLibrary.sol#L19-L44,135
findings-35,`CapsLibrary.validateVariablePoolHasEnoughLiquidity()` always revert,,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/CapsLibrary.sol#L67-L72,59
findings-36,Insufficient Liquidity Check on AAVE Variable Pool for multiple pending borrowers,interesting,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/main/src/libraries/CapsLibrary.sol#L67-L72,87
findings-37,Use of `isMulticall` is unsafe for future contract upgrades without reentrancy protection,,Unsatisfactory,,68
findings-38,Liquidator cannot deposit both USDC and WETH through multicall in same transaction if there is `msg.value` included,,Unsatisfactory,,78
findings-39,`LiquidateWithReplacement` not take fee on new borrower,,Unsatisfactory,,89
findings-4,Limit order offerers have little control over amounts they would borrow or lend,,Unsatisfactory,,67
findings-40,Lender-Enforced 150% Collateral Ratio Creates Extreme Risk for Borrowers,,Unsatisfactory,,49
findings-41,`LiquidateWithReplacement` Fails to Reduce Liquidator Costs and have no benefit over standard `Liquidation` call,,Unsatisfactory,,101
findings-42,Repay do not check debt position already moved to another borrower or belong to `msg.sender`,dangerous race condition,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/Size.sol#L229-L244,90
findings-43,Admin config lack of some validation for `crLiquidation` and `crOpening`,QA,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/UpdateConfig.sol#L87-L93,48
findings-44,Lack of Borrower Protection: Borrower loss when borrow offer APR is higher than lend offer APR,,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/BuyCreditMarket.sol#L51-L115,217
findings-45,Wrong Liquidator Rewards Calculation,units,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L96-L99,76
findings-46,`openingLimitBorrowCR` is Inadequate to Protect Borrowers from more Debt after Repayment or Liquidation,,Unsatisfactory,,74
findings-47,`SellCreditMarket` with non-ExactAmountIn calculate wrong credit for borrower,"QA at most, fees",Satisfactory,"https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/AccountingLibrary.sol#L249,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/AccountingLibrary.sol#L256",239
findings-49,"Since the lender and borrower can be the same, BorrowATokenCap can be bypassed.","QA, multicall",Satisfactory,https://github.com/code-423n4/2024-06-size/blob/main/src/libraries/CapsLibrary.sol#L19-L44,194
findings-5,The debtor can be liquidated if his loan due date has come while the protocol is in the paused state,Acceptable risk but should be noted regardless,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/main/src/libraries/RiskLibrary.sol#L104-L115,48
findings-50,The protocol fails to collect the full fee accurately when there is a fragmentation fee,"QA at most, fees",Satisfactory,"https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/AccountingLibrary.sol#L249,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/AccountingLibrary.sol#L256",205
findings-52,LiquidatorReward is incorrectly calculated,units,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L96-L99,74
findings-53,LiquidateWithReplacement does not charge swap fees on the borrower,no fee on replacement,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/LiquidateWithReplacement.sol#L146,90
findings-54,Swap fees are incorrectly calculated when selling credit as a whole when `exactAmountIn == false`.,"QA at most, fees",Satisfactory,"https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/AccountingLibrary.sol#L249,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/AccountingLibrary.sol#L256",157
findings-55,Swap fees are incorrectly calculated when selling partial credit when `exactAmountIn == false`.,"QA at most, fees",Satisfactory,"https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/AccountingLibrary.sol#L249,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/AccountingLibrary.sol#L256",163
findings-56,Buying or selling an existing credit does not validate if the remaining tenor is in range,,Unsatisfactory,,151
findings-57,"In `BuyCreditMarket.sol` and `SellCreditMarket.sol`, this constraint for minimum credit is higher than it should be.",incorrect restriction,Satisfactory,"https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/BuyCreditMarket.sol#L91-L93,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/SellCreditMarket.sol#L93-L95",69
findings-58,Underwater users are not allowed to use `compensate()` to repay debts,Seems like a missing feature,Unsatisfactory,,85
findings-59,"Malicious users can perform a grief attack by repaying a loan to themselves using multicall to deposit tokens, thereby exceeding the `borrowATokenCap`.","QA, multicall",Satisfactory,https://github.com/code-423n4/2024-06-size/blob/main/src/libraries/CapsLibrary.sol#L19-L44,133
findings-6,Multicall incorrectly validates borrow token supply cap,total supply instead of balance?,Unsatisfactory,,101
findings-60,"If a user has placed both a buy limit order and a sell limit order, and the sell limit order has a lower APR, the user will be vulnerable to arbitrage.",user mistake?,Unsatisfactory,,47
findings-61,"Anyone can call the `claim()` function to claim credit for the lender, which increases the lender's borrowAToken and may cause them to lend more tokens than expected.",,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/main/src/libraries/actions/Claim.sol#L48-L60,92
findings-62,"In `Compensate.sol`, fragmentation fee is not charged when compensate amount is less than `creditPositionWithDebtToRepay.credit`.",no frag fee,Satisfactory,"https://github.com/code-423n4/2024-06-size/blob/main/src/libraries/actions/Compensate.sol#L136,https://github.com/code-423n4/2024-06-size/blob/main/src/libraries/actions/Compensate.sol#L146",113
findings-63,"The `compensate()` function can be frontrun, causing users to pay an unnecessary fragmentation fee.",,Unsatisfactory,,100
findings-64,"When users buy existing credit via `BuyCreditMarket` and has `exactAmountIn == true`, it is nearly impossible for users to avoid paying fragmentation fee.","QA at most, fees",Satisfactory,"https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/AccountingLibrary.sol#L249,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/AccountingLibrary.sol#L256",123
findings-65,"When users sell existing credit via `SellCreditMarket` and has `exactAmountIn == false`, it is nearly impossible for users to avoid paying fragmentation fee.","QA at most, fees",Satisfactory,"https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/AccountingLibrary.sol#L249,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/AccountingLibrary.sol#L256",130
findings-66,YieldCurveLibrary.sol#getAdjustedAPR does not check if variablePoolBorrowRate is non-zero.,,Unsatisfactory,,79
findings-67,LiquidateWithReplacement should round up issuanceValue instead of rounding down.,QA,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/main/src/libraries/actions/LiquidateWithReplacement.sol#L146,56
findings-68,NonTransferrableScaledToken is not ERC20 compliant - it does not correctly fire the `Transfer` event.,,Unsatisfactory,,72
findings-7,Incorrect validation in validateVariablePoolHasEnoughLiquidity will cause DoS of the protocol's major functions,variable pool,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/CapsLibrary.sol#L67-L72,70
findings-70,The collateral remainder cap is incorrectly calculated during liquidation,,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L105-L108,221
findings-71,The borrower can borrow USDC without a swap fee,no fee on replacement,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/LiquidateWithReplacement.sol#L146,105
findings-72,Liquidator rewards are incorrectly calculated ,units,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L96-L99,37
findings-73,Overdue liquidations punish overcollaterized users,seems like a business choice,Unsatisfactory,,59
findings-74,Overcollaterized users can withdraw their collateral in anticipation of liquidation,seems unavoidable?,Unsatisfactory,,55
findings-75,Underwater liquidations don't take into account the borrower's future cash flows to compensate his debt,seems like a business choice,Unsatisfactory,,29
findings-76,Compensating borrowers could bear unexpected fragmentation fees,frag fee should be applied in all cases?,Unsatisfactory,,59
findings-77,`repay` is not callable during a pause,Acceptable risk but should be noted regardless,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/main/src/libraries/RiskLibrary.sol#L104-L115,26
findings-78,Users cannot eliminate the liquidation risk when the CR falls below the liquidation CR by repaying partially,,Unsatisfactory,,101
findings-79,Liquidator receive a smaller reward because `liquidatorReward` is the minimum between a `collateral` amount and a `borrowAToken` amount,units,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L96-L99,156
findings-8,take profit loss when users sell credit with existing credit,,Unsatisfactory,,78
findings-80,validateVariablePoolHasEnoughLiquidity() misuse liquidity,variable pool,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/CapsLibrary.sol#L67-L72,81
findings-81,multicall() borrowATokenSupply amount wrong,total supply?,Unsatisfactory,,123
findings-82,"validateCompensate() Missing check forSale, may be maliciously modified",,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/AccountingLibrary.sol#L118-L119,112
findings-83,executeLiquidate() miscalculation liquidatorReward,units,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L96-L99,80
findings-84,"borrowAToken and aToken rounds direction are not the same, which can cause multiple problems.",,Unsatisfactory,,109
findings-85,"executeSellCreditMarket() when creditPositionId == RESERVED_ID , Incorrect calculation of fees","QA at most, fees",Satisfactory,"https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/AccountingLibrary.sol#L249,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/AccountingLibrary.sol#L256",114
findings-86,"executeSellCreditMarket() when creditPositionId != RESERVED_ID , Incorrect calculation of fees","QA at most, fees",Satisfactory,"https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/AccountingLibrary.sol#L249,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/AccountingLibrary.sol#L256",129
findings-87,compensate() may increase the risk of lender,,Unsatisfactory,,96
findings-88,withdraw() users may can't withdraw underlyingBorrowToken properly,,Unsatisfactory,,65
findings-90,The `szaUSDC` token and `USDC` token do not have a strict 1:1 conversion ratio,,Unsatisfactory,,92
findings-91,`multicall()` doesn't correctly enforce `borrowATokenCap`,totalsupply?,Unsatisfactory,,100
findings-92,`amount` validations are incorrect for some `exactAmountIn` cases,incorrect restriction,Satisfactory,"https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/BuyCreditMarket.sol#L91-L93,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/SellCreditMarket.sol#L93-L95",73
findings-94,Validations aren't sufficient to prevent reorg issues,,Unsatisfactory,,37
findings-95,Unhealthy borrowers can recover all collateral and avoid liquidation penalty via `Size::compensate`,,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/main/src/libraries/actions/Compensate.sol#L31-L101,227
findings-96,"Using multicall functionality, one can bypass the deposit cap even without reducing debt",totalsupply?,Unsatisfactory,,95
findings-97,Wrong comparison of token values causes liquidator profit to be negligible,units,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L96-L99,95
findings-98,"Miscalculation of remaining collateral, protocol cut when liquidating overdue loans is too high",,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L105-L108,143
findings-99,The borrowers cannot withdraw the borrowed USDC because there is no upper limit on the borrowing amount,,Unsatisfactory,,86