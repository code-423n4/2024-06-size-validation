issue,title,validator comment,grade,root cause (URL),size
findings-10,Fragmentation fee is not taken if user compensates with newly created position,Missing check for creditPositionWithDebtToRepay.credit > 0,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Compensate.sol#L146,82
findings-100,"Repaying an underwater debt is dangerous, as the borrower could lose the repayment cash while still being liquidated if a `liquidateWithReplacement()` is executed before the `repay()`",Refactoring needed to avoid mishap,Satisfactory,"https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/Size.sol#L229, https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Repay.sol#L33-L41",113
findings-101,Bad actors can grief users by creating useless loans on their behalf via `Size::compensate`,Intended design as long as crLiquidation isn't hit,Unsatisfactory,,256
findings-102,Users cannot make compensation when the due date is within the minimum tenor period,Inadequate remediation for underwater borrowers,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/Size.sol#L250,106
findings-103,Compensate allows lenders to transfer bad credit positions before an oracle update,Commonly known issue in front-running,Unsatisfactory,,41
findings-104,Liquidator profit collateral is underestimated due to an inconsistency in units,18 decimal debtInCollateralToken NOT used,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L96-L99,36
findings-105,The borrower can `compensate` their debt using credit with soon-to-be-liquidatable debt,Intended design,Unsatisfactory,,82
findings-106,By only taking into account the liquidatorProfit when calling liquidateWithReplacement() the caller might miss out on profitable liqudations,liquidatorProfit in borrow tokens not catered for,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/LiquidateWithReplacement.sol#L147,32
findings-107,Borrower is not able to compensate his lenders if he is underwater,Inadequate remediation for underwater borrowers,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/Size.sol#L250,70
findings-108,"Credit value stops growing when the debt is overdue, causing a loss for the lender.",Intended design justifying oeverdue loan being liquidable,Unsatisfactory,,86
findings-109,"Unhealthy borrower is able to ""withdraw"" most of his borrow tokens",Incorrect assumptions. Wouldn't click,Unsatisfactory,,58
findings-11,"The initiator should pay the fragmentation fees in the sellCreditMarket function, rather than the lender.",Insufficient proof alleging the flaw,Unsatisfactory,,47
findings-110,liquidatorReward is calculated with the wrong token leading to incorrect amount of funds being sent to the liquidator,18 decimal debtInCollateralToken NOT used,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L96-L99,86
findings-113,Size liquidation bots might skip profitable liquidations due to the minimum collateral profit check.,liquidatorProfit in borrow tokens not catered for,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/LiquidateWithReplacement.sol#L147,168
findings-114,Protocol is not usable due to incorrect aaveV3 liquidity check,Incorrect address reference,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/CapsLibrary.sol#L60-L75,94
findings-115,Wrong math for splitting the collateral in `liquidate` leads to unfair liquidation for borrowers,18 decimal debtInCollateralToken NOT used,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L96-L99,77
findings-116,"Exploit in `liquidateWithReplacement` allows bots to force lenders into repaying their own loans, causing financial loss",Low QA on admin controlled call,Unsatisfactory,,100
findings-117,Picking a second borrower with 0 APR when calling the `liquidateWithReplacement` by bots leads to no profit for the protocol,Low QA on admin controlled call,Unsatisfactory,,82
findings-118,Loss of fees for the `feeRecipient` in case of selling credit market,Missing residual fee collection,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/AccountingLibrary.sol#L249,85
findings-119,Improper Validation in the `BuyCreditMarket::validateBuyCreditMarket` Function Causes Incorrect Reverts When `params.exactAmountIn` is True resulting in an invariant break,params.amount as cash not catered for,Satisfactory,"https://github.com/SizeCredit/size-solidity/blob/539d14d06919830d07413ab04d3cd0a33740fc33/src/libraries/actions/BuyCreditMarket.sol#L91-L93, https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/SellCreditMarket.sol#L93",63
findings-12,Debt fragmentation via compensate can DOS liquidation attempts,fragmentationFee is paid by whoever causes the fragmentation,Unsatisfactory,,226
findings-120,Credit buyers can't use a longer due date than the due date of for sale credit position,Intended design,Unsatisfactory,,44
findings-123,BuyCreditMarket and SellCreditMarket can revert despite using correct amount of credit that is more than minimumCreditBorrowAToken,params.amount as cash not catered for,Satisfactory,"https://github.com/SizeCredit/size-solidity/blob/539d14d06919830d07413ab04d3cd0a33740fc33/src/libraries/actions/BuyCreditMarket.sol#L91-L93, https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/SellCreditMarket.sol#L93",77
findings-124,A user can be in a loan all by himself - being the lender and the borrower of the same loan,No lender would do it for an immediate loss,Unsatisfactory,,44
findings-125,Liquidator's reward is significantly lower than it should be,18 decimal debtInCollateralToken NOT used,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L96-L99,140
findings-126,"In the Compensate function, splitting the original credit position through ""mining new credit"" will never charge a fragmentation fee",Missing check for creditPositionWithDebtToRepay.credit > 0,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Compensate.sol#L146,138
findings-128,"Swap fees calculation is inconsistent, producing different fees for essentially the same loans",Inconsistent swap fee charging,Satisfactory,"https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/BuyCreditMarket.sol#L156-L177, https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/SellCreditMarket.sol#L159-L182",73
findings-129,"User can transfer OVERDUE loans, when he isn't expected to and there are checks that try to prevent that",Intended design,Unsatisfactory,,182
findings-13,The `borrowATokenCap` can be bypassed when `deposit` is called by using `multicall`.,Invalid validation entailed,Satisfactory,"https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/Multicall.sol#L29, https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/Multicall.sol#L37",254
findings-130,Incorrect calculation of deposit amount using address(this).balance,"Readme: This means leftover amounts, if sent forcibly, are always credited to the depositor.",Unsatisfactory,,37
findings-131,If the executeBuyCreditMarket function and executeSellCreditMarket function generate a credit split during execution without charging a fragmentation fee,fragmentationFee is paid by whoever causes the fragmentation,Unsatisfactory,,87
findings-133,The user's funds may all be used to submit the transaction fee,Already checked and circumvented by state.feeConfig.fragmentationFee > cashAmountIn,Unsatisfactory,,26
findings-134,latestRoundData() has no check for round completeness,Unneeded check,Unsatisfactory,,70
findings-136,ChainlinkOracle will return the wrong price for asset if underlying aggregator hits minAnswer,No longer needed per Chainlink,Unsatisfactory,,76
findings-137,Incorrect assumption about params.amount can cause DoS for specific executions,params.amount as cash not catered for,Satisfactory,"https://github.com/SizeCredit/size-solidity/blob/539d14d06919830d07413ab04d3cd0a33740fc33/src/libraries/actions/BuyCreditMarket.sol#L91-L93, https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/SellCreditMarket.sol#L93",35
findings-138,`AccountingLibrary.getCreditAmountIn()` calculates swap fees incorrectly.,Inconsistent swap fee charging,Satisfactory,"https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/BuyCreditMarket.sol#L156-L177, https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/SellCreditMarket.sol#L159-L182",93
findings-139,`Liquidate.executeLiquidate()` calculates `liquidatorReward` incorrectly.,18 decimal debtInCollateralToken NOT used,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L96-L99,53
findings-14,Overestimating the credit amount when `buyCreditMarket` is executed due to not properly deducting the swap fee,Inconsistent swap fee charging,Satisfactory,"https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/BuyCreditMarket.sol#L156-L177, https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/SellCreditMarket.sol#L159-L182",140
findings-140,`Liquidate.executeLiquidate()` calculates `collateralRemainderCap` incorrectly.,Flawed calculation affecting borrower with healthier collateral ratio status,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L90-L113,72
findings-141,`LiquidateWithReplacement.executeLiquidateWithReplacement()` should charge a swap fee from a new borrower.,Intended design,Unsatisfactory,,51
findings-142,A meaningless liquidity validation for a variable pool,Insufficient proof alleging the flaw,Unsatisfactory,,67
findings-143,Inconsistent liquidity validation for a variable pool,Insufficient proof alleging the flaw,Unsatisfactory,,48
findings-144,The `borrowATokenCap` requirement doesn't work during a multicall.,Invalid validation entailed,Satisfactory,"https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/Multicall.sol#L29, https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/Multicall.sol#L37",76
findings-145,"While buying/selling credit markets, it might revert when it should work due to the `minimumCreditBorrowAToken` validation.",params.amount as cash not catered for,Satisfactory,"https://github.com/SizeCredit/size-solidity/blob/539d14d06919830d07413ab04d3cd0a33740fc33/src/libraries/actions/BuyCreditMarket.sol#L91-L93, https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/SellCreditMarket.sol#L93",37
findings-146,Possible revert of buying/selling 100% of credit markets.,buy/sell 100% of positions to avoid fragmentationFee not always possible,Satisfactory,"https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/BuyCreditMarket.sol#L162, https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/SellCreditMarket.sol#L175",98
findings-147,A user might repay the wrong borrower.,Refactoring needed to avoid mishap,Satisfactory,"https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/Size.sol#L229, https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Repay.sol#L33-L41",71
findings-148,`executeLiquidateWithReplacement()` doesn't validate `minimumCreditBorrowAToken` while replacing a debt position.,Low QA as it's handled by the protocol team,Unsatisfactory,,39
findings-149,No `minCollateralOut/deadline` validation in `selfLiquidate()`.,Inconsequential for the context entailed,Unsatisfactory,,49
findings-15,`executeBuyCreditMarket` returns the wrong amount of cash and overestimates the amount that needs to be checked in the variable pool,Insufficient proof alleging the flaw,Unsatisfactory,,139
findings-150,`executeCompensate()` doesn't charge the `fragmentationFee` for `RESERVED_ID`.,Missing check for creditPositionWithDebtToRepay.credit > 0,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Compensate.sol#L146,75
findings-151,Unfair calculation logic of protocol profit during liquidation,Flawed calculation affecting borrower with healthier collateral ratio status,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L90-L113,70
findings-152,Sandwich attack on loan fulfillment will temporarily prevent users from accessing their borrowed funds,Intended design. Inadequate elaboration alleging the exploit,Unsatisfactory,,63
findings-153,A rogue borrower can split the lender's credit position into multiple positions without paying fragmentation fees,Missing check for creditPositionWithDebtToRepay.credit > 0,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Compensate.sol#L146,300
findings-155,BorrowOffers with high APR cause DOS in order to grief lenders,Low QA on orderbook spamming,Unsatisfactory,,68
findings-156,Malicious offers can significantly impact the usability of the protocol,Low QA on orderbook spamming. Unlikely to happen too,Unsatisfactory,,78
findings-16,`validateSellCreditMarket` and `validateBuyCreditMarket` incorrectly assumes `params.amount` is credit when validating against `minimumCreditBorrowAToken`,params.amount as cash not catered for,Satisfactory,"https://github.com/SizeCredit/size-solidity/blob/539d14d06919830d07413ab04d3cd0a33740fc33/src/libraries/actions/BuyCreditMarket.sol#L91-L93, https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/SellCreditMarket.sol#L93",83
findings-17,Incorrectly using `futureValue` instead of `debtInCollateralToken` when calculating `liquidatorReward`,18 decimal debtInCollateralToken NOT used,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L96-L99,119
findings-18,Users can bypass the borrowAToken cap check by using multicall,Invalid validation entailed,Satisfactory,"https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/Multicall.sol#L29, https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/Multicall.sol#L37",119
findings-19,"When the borrowAToken cap is reached, users may not always be able to repay their debt in some cases due to precision errors",Extremely edge case,Unsatisfactory,,174
findings-20,No Fragmentation fees paid on credit fragmentation due to partial debt repayment,Missing check for creditPositionWithDebtToRepay.credit > 0,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Compensate.sol#L146,194
findings-21,Users won't liquidate positions because the logic used to calculate the liquidator's profit is incorrect,18 decimal debtInCollateralToken NOT used,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L96-L99,148
findings-22,Users can avoid full liquidation by splitting up their debt,Back to square one with the split exploit,Unsatisfactory,,305
findings-23,The protocol cannot collect the full fee when borrowers sell credit without a fragmentation fee.,Missing residual fee collection,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/AccountingLibrary.sol#L249,169
findings-24,No fragmentation fee is taken when `compensate` is performed using `RESERVED_ID`.,Missing check for creditPositionWithDebtToRepay.credit > 0,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Compensate.sol#L146,143
findings-25,"Pausing prevents debt repayment, leading to immediate liquidation if the debt is overdue when unpaused.", Overdue liquidations not catered for,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/main/src/libraries/LoanLibrary.sol#L135-L137,82
findings-26,Lender USDC reward is not converted to collateral token,18 decimal debtInCollateralToken NOT used,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L96-L99,89
findings-27,Borrow aToken cap can be bypassed by depositing via multicall,Invalid validation entailed,Satisfactory,"https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/Multicall.sol#L29, https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/Multicall.sol#L37",82
findings-28,Borrower will not be charged fragmentation fee when creating new credit position when compensating a credit partially,Missing check for creditPositionWithDebtToRepay.credit > 0,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Compensate.sol#L146,47
findings-29,Rounding against the protocol will result in less rewards,Low QA and Inconsequential. It seems protocol intended with the use of Math.min too,Unsatisfactory,,43
findings-3,PriceFeed doesn't check min/max price boundaries,No longer needed per Chainlink,Unsatisfactory,,29
findings-30,Lender can be forced to pay swap and fragmentation fees on claimable credit amounts,Insufficient proof alleging claimed amount is available for borrow without lender's control,Unsatisfactory,,32
findings-31,Strategic credit fragmentation by borrower can force lender to get liquidated on their borrow positions,fragmentationFee is paid by whoever causes the fragmentation,Unsatisfactory,,98
findings-32,Fragmentation fee not refunded if the claimer is the credit position owner,Insufficient proof alleging the flaw,Unsatisfactory,,50
findings-33,Lender can be forced out of existing positions unwillingly if they have an open SELL LMT order,Intended design,Unsatisfactory,,69
findings-34,User can bypass `RiskConfig.borrowATokenCap` limit up to 10x times using multicall. Leading to temporary DOS attack,Invalid validation entailed,Satisfactory,"https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/Multicall.sol#L29, https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/Multicall.sol#L37",135
findings-35,`CapsLibrary.validateVariablePoolHasEnoughLiquidity()` always revert,Incorrect address reference,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/CapsLibrary.sol#L60-L75,59
findings-36,Insufficient Liquidity Check on AAVE Variable Pool for multiple pending borrowers,Insufficient proof alleging the flaw,Unsatisfactory,,87
findings-37,Use of `isMulticall` is unsafe for future contract upgrades without reentrancy protection,No actual scenario given,Unsatisfactory,,68
findings-38,Liquidator cannot deposit both USDC and WETH through multicall in same transaction if there is `msg.value` included,Inadequate elaboration on the needed use case,Unsatisfactory,,78
findings-39,`LiquidateWithReplacement` not take fee on new borrower,Intended design,Unsatisfactory,,89
findings-4,Limit order offerers have little control over amounts they would borrow or lend,Intended design,Unsatisfactory,,67
findings-40,Lender-Enforced 150% Collateral Ratio Creates Extreme Risk for Borrowers,Seemingly known readme issue,Unsatisfactory,,49
findings-41,`LiquidateWithReplacement` Fails to Reduce Liquidator Costs and have no benefit over standard `Liquidation` call,liquidatorProfit in borrow tokens not catered for,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/LiquidateWithReplacement.sol#L120-L163,101
findings-42,Repay do not check debt position already moved to another borrower or belong to `msg.sender`,Refactoring needed to avoid mishap,Satisfactory,"https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/Size.sol#L229, https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Repay.sol#L33-L41",90
findings-43,Admin config lack of some validation for `crLiquidation` and `crOpening`,Low QA on admin controlled input parameter,Unsatisfactory,,48
findings-44,Lack of Borrower Protection: Borrower loss when borrow offer APR is higher than lend offer APR,Intended design. Borrowers be aware,Unsatisfactory,,217
findings-45,Wrong Liquidator Rewards Calculation,18 decimal debtInCollateralToken NOT used,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L96-L99,76
findings-46,`openingLimitBorrowCR` is Inadequate to Protect Borrowers from more Debt after Repayment or Liquidation,Seemingly known readme issue,Unsatisfactory,,74
findings-47,`SellCreditMarket` with non-ExactAmountIn calculate wrong credit for borrower,Incorrect assumptions,Unsatisfactory,,239
findings-49,"Since the lender and borrower can be the same, BorrowATokenCap can be bypassed.",Invalid validation entailed,Satisfactory,"https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/Multicall.sol#L29, https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/Multicall.sol#L37",194
findings-5,The debtor can be liquidated if his loan due date has come while the protocol is in the paused state, Overdue liquidations not catered for,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/main/src/libraries/LoanLibrary.sol#L135-L136,48
findings-50,The protocol fails to collect the full fee accurately when there is a fragmentation fee,Missing residual fee collection,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/AccountingLibrary.sol#L249,205
findings-52,LiquidatorReward is incorrectly calculated,18 decimal debtInCollateralToken NOT used,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L96-L99,74
findings-53,LiquidateWithReplacement does not charge swap fees on the borrower,Intended design,Unsatisfactory,,90
findings-54,Swap fees are incorrectly calculated when selling credit as a whole when `exactAmountIn == false`.,Inconsistent swap fee charging,Satisfactory,"https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/BuyCreditMarket.sol#L156-L177, https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/SellCreditMarket.sol#L159-L182",157
findings-55,Swap fees are incorrectly calculated when selling partial credit when `exactAmountIn == false`.,Inconsistent swap fee charging,Satisfactory,"https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/BuyCreditMarket.sol#L156-L177, https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/SellCreditMarket.sol#L159-L182",163
findings-56,Buying or selling an existing credit does not validate if the remaining tenor is in range,Inadequate validation leads to breaking a main invariant of the protocol,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/main/src/libraries/actions/BuyCreditMarket.sol#L51,151
findings-57,"In `BuyCreditMarket.sol` and `SellCreditMarket.sol`, this constraint for minimum credit is higher than it should be.",params.amount as cash not catered for,Satisfactory,"https://github.com/SizeCredit/size-solidity/blob/539d14d06919830d07413ab04d3cd0a33740fc33/src/libraries/actions/BuyCreditMarket.sol#L91-L93, https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/SellCreditMarket.sol#L93",69
findings-58,Underwater users are not allowed to use `compensate()` to repay debts,Inadequate remediation for underwater borrowers,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/Size.sol#L250,85
findings-59,"Malicious users can perform a grief attack by repaying a loan to themselves using multicall to deposit tokens, thereby exceeding the `borrowATokenCap`.",Invalid validation entailed,Satisfactory,"https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/Multicall.sol#L29, https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/Multicall.sol#L37",133
findings-6,Multicall incorrectly validates borrow token supply cap,Invalid validation entailed,Satisfactory,"https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/Multicall.sol#L29, https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/Multicall.sol#L37",101
findings-60,"If a user has placed both a buy limit order and a sell limit order, and the sell limit order has a lower APR, the user will be vulnerable to arbitrage.",Incorrect assumptions and perceptions,Unsatisfactory,,47
findings-61,"Anyone can call the `claim()` function to claim credit for the lender, which increases the lender's borrowAToken and may cause them to lend more tokens than expected.",Insufficient proof alleging claimed amount is available for borrow without lender's control,Unsatisfactory,,92
findings-62,"In `Compensate.sol`, fragmentation fee is not charged when compensate amount is less than `creditPositionWithDebtToRepay.credit`.",Missing check for creditPositionWithDebtToRepay.credit > 0,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Compensate.sol#L146,113
findings-63,"The `compensate()` function can be frontrun, causing users to pay an unnecessary fragmentation fee.",fragmentationFee is paid by whoever causes the fragmentation,Unsatisfactory,,100
findings-64,"When users buy existing credit via `BuyCreditMarket` and has `exactAmountIn == true`, it is nearly impossible for users to avoid paying fragmentation fee.",buy/sell 100% of positions to avoid fragmentationFee not always possible,Satisfactory,"https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/BuyCreditMarket.sol#L162, https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/SellCreditMarket.sol#L175",123
findings-65,"When users sell existing credit via `SellCreditMarket` and has `exactAmountIn == false`, it is nearly impossible for users to avoid paying fragmentation fee.",buy/sell 100% of positions to avoid fragmentationFee not always possible,Satisfactory,"https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/BuyCreditMarket.sol#L162, https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/SellCreditMarket.sol#L175",130
findings-66,YieldCurveLibrary.sol#getAdjustedAPR does not check if variablePoolBorrowRate is non-zero.,Low QA on uninitialized variablePoolBorrowRate,Unsatisfactory,,79
findings-67,LiquidateWithReplacement should round up issuanceValue instead of rounding down.,Low QA and inconsequential,Unsatisfactory,,56
findings-68,NonTransferrableScaledToken is not ERC20 compliant - it does not correctly fire the `Transfer` event.,Emitted in parental _update(),Unsatisfactory,,72
findings-7,Incorrect validation in validateVariablePoolHasEnoughLiquidity will cause DoS of the protocol's major functions,Incorrect address reference,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/CapsLibrary.sol#L60-L75,70
findings-70,The collateral remainder cap is incorrectly calculated during liquidation,Flawed calculation affecting borrower with healthier collateral ratio status,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L90-L113,221
findings-71,The borrower can borrow USDC without a swap fee,Intended design,Unsatisfactory,,105
findings-72,Liquidator rewards are incorrectly calculated ,18 decimal debtInCollateralToken NOT used,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L96-L99,37
findings-73,Overdue liquidations punish overcollaterized users,Flawed calculation affecting borrower with healthier collateral ratio status,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L90-L113,59
findings-74,Overcollaterized users can withdraw their collateral in anticipation of liquidation,Intended design,Unsatisfactory,,55
findings-75,Underwater liquidations don't take into account the borrower's future cash flows to compensate his debt,Missing check on first defense,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L37-L44,29
findings-76,Compensating borrowers could bear unexpected fragmentation fees,Missing check for creditPositionWithDebtToRepay.credit > 0,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Compensate.sol#L146,59
findings-77,`repay` is not callable during a pause, Overdue liquidations not catered for,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/Size.sol#L198,26
findings-78,Users cannot eliminate the liquidation risk when the CR falls below the liquidation CR by repaying partially,Inadequate remediation for underwater borrowers,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/Size.sol#L250,101
findings-79,Liquidator receive a smaller reward because `liquidatorReward` is the minimum between a `collateral` amount and a `borrowAToken` amount,18 decimal debtInCollateralToken NOT used,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L96-L99,156
findings-8,take profit loss when users sell credit with existing credit,validateBuyCreditMarket() has minimum check in place before executeBuyCreditMarket() kicks in,Satisfactory,,78
findings-80,validateVariablePoolHasEnoughLiquidity() misuse liquidity,Incorrect address reference,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/CapsLibrary.sol#L60-L75,81
findings-81,multicall() borrowATokenSupply amount wrong,Invalid validation entailed,Satisfactory,"https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/Multicall.sol#L29, https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/Multicall.sol#L37",123
findings-82,"validateCompensate() Missing check forSale, may be maliciously modified",Missing for sale check in compensate(),Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Compensate.sol#L42,112
findings-83,executeLiquidate() miscalculation liquidatorReward,18 decimal debtInCollateralToken NOT used,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L96-L99,80
findings-84,"borrowAToken and aToken rounds direction are not the same, which can cause multiple problems.",Low QA and inconsequential,Unsatisfactory,,109
findings-85,"executeSellCreditMarket() when creditPositionId == RESERVED_ID , Incorrect calculation of fees",Inconsistent swap fee charging,Satisfactory,"https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/BuyCreditMarket.sol#L156-L177, https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/SellCreditMarket.sol#L159-L182",114
findings-86,"executeSellCreditMarket() when creditPositionId != RESERVED_ID , Incorrect calculation of fees",Inconsistent swap fee charging,Satisfactory,"https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/BuyCreditMarket.sol#L156-L177, https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/SellCreditMarket.sol#L159-L182",129
findings-87,compensate() may increase the risk of lender,No guarantee new borrower is healthier,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Compensate.sol#L64-L89,96
findings-88,withdraw() users may can't withdraw underlyingBorrowToken properly,Intended design,Unsatisfactory,,65
findings-90,The `szaUSDC` token and `USDC` token do not have a strict 1:1 conversion ratio,The protocol does not support rebasing/fee-on-transfer tokens,Unsatisfactory,,92
findings-91,`multicall()` doesn't correctly enforce `borrowATokenCap`,Invalid validation entailed,Satisfactory,"https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/Multicall.sol#L29, https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/Multicall.sol#L37",100
findings-92,`amount` validations are incorrect for some `exactAmountIn` cases,params.amount as cash not catered for,Satisfactory,"https://github.com/SizeCredit/size-solidity/blob/539d14d06919830d07413ab04d3cd0a33740fc33/src/libraries/actions/BuyCreditMarket.sol#L91-L93, https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/SellCreditMarket.sol#L93",73
findings-94,Validations aren't sufficient to prevent reorg issues,Infeasible per the described POC,Unsatisfactory,,37
findings-95,Unhealthy borrowers can recover all collateral and avoid liquidation penalty via `Size::compensate`,Intended design as long as crLiquidation isn't hit,Unsatisfactory,,227
findings-96,"Using multicall functionality, one can bypass the deposit cap even without reducing debt",Invalid validation entailed,Satisfactory,"https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/Multicall.sol#L29, https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/Multicall.sol#L37",95
findings-97,Wrong comparison of token values causes liquidator profit to be negligible,18 decimal debtInCollateralToken NOT used,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L96-L99,95
findings-98,"Miscalculation of remaining collateral, protocol cut when liquidating overdue loans is too high",Flawed calculation affecting borrower with healthier collateral ratio status,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L90-L113,143
findings-99,The borrowers cannot withdraw the borrowed USDC because there is no upper limit on the borrowing amount,Intended design,Unsatisfactory,,86