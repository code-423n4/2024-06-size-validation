issue,title,validator comment,grade,root cause (URL),size
validation-529,ETH collateral depositers will lose funds in the depegged event of weth,Known readme issue,Unsatisfactory,,24
validation-174,executeSelfLiquidate Function: Pass assignedCollateral as Argument to transferFrom,Insufficient proof alleging the flaw,Unsatisfactory,,36
validation-692,Loan limit check logic loophole leads to loan limit exceeding problem,Low inconsequential,Unsatisfactory,,38
validation-97,Potential Reentrancy Vulnerability in Deposit and Withdraw Functions,CEI well in place in DepositTokenLibrary.sol,Unsatisfactory,,39
validation-486, Insufficient Repayment Handling in repayDebt Function,Incorrect perceptions,Unsatisfactory,,43
validation-8,A reentrancy attack on the withdraw,CEI well in place in DepositTokenLibrary.sol,Unsatisfactory,,43
validation-256,Unhandled Chainlink latestRoundData() revert can lock price oracle access in PriceFeed.sol,Known readme issue,Unsatisfactory,,44
validation-526,limit order might be filled with undesired apr ,Incorrect perceptions,Unsatisfactory,,47
validation-509,Chainlink flash crash price,No longer needed per Chainlink,Unsatisfactory,,47
validation-50, Inconsistent State and Loss of Funds Due to Missing Token Transfer Logic in `buyCreditMarket` Function,Incorrect perceptions,Unsatisfactory,,48
validation-632,Credit Amount Can be Reduced Below The Minimum Credit Value,Catchy (0 < 0) == false,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/main/src/libraries/RiskLibrary.sol#L17-L25,50
validation-519,liquidation should have grace period for sequencer down time,It's there: GRACE_PERIOD_TIME = 3600,Unsatisfactory,,50
validation-169,Incorrect Conversion in debtTokenAmountToCollateralTokenAmount (Reverse Market),Insufficient proof (lacking coded POC) alleging the flaw,Unsatisfactory,,50
validation-700,Insufficient validation before state change,Intended design,Unsatisfactory,,52
validation-549,The `YEAR` is constant in `Math` contract and its value is 365 days which is not always correct,Low inconsequential,Unsatisfactory,,53
validation-276,Missing BorrowOffer Validation in LiquidateWithReplacement ,Low on validation check,Unsatisfactory,,53
validation-621,Loss of Fund Value when User Deposit in the Size Contract,The user will be lucky with a foolish attacker then (It will be more than msg.value),Unsatisfactory,,54
validation-254, PriceFeed.sol Lacks Check for Min and Max Price Thresholds,No longer needed per Chainlink,Unsatisfactory,,54
validation-132,SelfLiquidate Function Allows Theft of Collateral Due to Incorrect Transfer Recipient,Incorrect assumptions and inadequate proof,Unsatisfactory,,54
validation-58,Double-Counting of Fragmentation Fee in getCashAmountIn Function Leads to Incorrect Calculations,fragmentationFee is paid by whoever causes the fragmentation,Unsatisfactory,,54
validation-61,Unhandled Invalid Position ID in getLoanStatus Function Causes Revert,Inadequate proof alleging the flaw,Unsatisfactory,,55
validation-618,Anyone can call `DepositTokenLibrary::withdrawUnderlyingCollateralToken` and `DepositTokenLibrary::withdrawUnderlyingTokenFromVariablePool` functions with arbitrary input parameters,Intended design,Unsatisfactory,,56
validation-3,This function is marked as an initializer but is also declared as public,Bot: [Low-9]	Initializer function can be front run,Unsatisfactory,,56
validation-55,Inconsistent Total Debt Accounting Due to Missing Update in `createDebtAndCreditPositions`,Incorrect perceptions,Unsatisfactory,,59
validation-51,Unrestricted Borrowed Amount Transfer Vulnerability in sellCreditMarket Function,Devoid of coded POC alleging the claim,Unsatisfactory,,60
validation-7,The smart contract's withdraw function is vulnerable to a reentrancy attack,CEI well in place in DepositTokenLibrary.sol,Unsatisfactory,,60
validation-5, The withdraw function in the provided code demonstrates the vulnerability,Inadequate proof alleging the flaw,Unsatisfactory,,60
validation-399,Inconsistent collateral ratio check allows premature self-liquidation,Incorrect perceptions on the current design,Unsatisfactory,,61
validation-6,gasPrice,Low QA on user input mistake,Unsatisfactory,,61
validation-199,`executeSellCreditMarket` Uses `Unupdated cashAmountOut` for `exactAmountIn=false`,params.amount as cash not catered for,Satisfactory,"https://github.com/SizeCredit/size-solidity/blob/539d14d06919830d07413ab04d3cd0a33740fc33/src/libraries/actions/BuyCreditMarket.sol#L91-L93, https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/SellCreditMarket.sol#L93",62
validation-101,Claim.sol Shortchanges Lenders Due to Flawed Rounding Logic,Low inconsequential,Unsatisfactory,,62
validation-13,5 Vonalblits ,Inadequate elaboration and insufficient proof,Unsatisfactory,,63
validation-2,The Size contract does not properly enforce access control,Bot: [Low-9]	Initializer function can be front run,Unsatisfactory,,63
validation-624,Clash of MultiCall Calls Due to Incomplete Validation,No actual scenario given,Unsatisfactory,,64
validation-302,Excess Collateral Not Returned to Borrower in High-Collateral Liquidation Scenarios,Flawed calculation affecting borrower with healthier collateral ratio status,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L90-L113,65
validation-178,executeSellCreditMarket Miscalculates maxCashAmountOut for Partial Lender Exits,DoS due to flawed limitation,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/BuyCreditMarket.sol#L162,66
validation-173,executeSelfLiquidate Sends Collateral to msg.sender (Not Borrower),Incorrect assumptions and inadequate proof,Unsatisfactory,,66
validation-283,Incorrect Liquidation Ratio Validation Allows Setting Unsafe Liquidation Thresholds,Invalid assumptions and insufficient proof,Unsatisfactory,,67
validation-59,Incorrect Variable Name in Error Message of `validateBorrowATokenIncreaseLteDebtTokenDecrease` Function Leads to Confusion,Low informational/QA,Unsatisfactory,,68
validation-539,The price in `PriceFeed::_getPrice` is not checked if it is between the min and max price,No longer needed per Chainlink,Unsatisfactory,,69
validation-202,`executeLiquidate` Miscalculates Profit in Unprofitable Liquidations,18 decimal debtInCollateralToken NOT used,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L96-L99,70
validation-614,The input parameter `_data` in `Size::multicall` is not checked and can be malicious,Inconsequential on user controlled calls,Unsatisfactory,,72
validation-382,A borrower's debt position can be forced to be liquidated - even though the borrower was willing to repay,Known readme issue,Unsatisfactory,,72
validation-446,A malicious borrower user can cause loss of funds for lender,Low spamming and incorrect perceptions,Unsatisfactory,,75
validation-211,Inconsistent Cash Amount Out Calculation in Existing Positions.,DoS due to flawed limitation,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/BuyCreditMarket.sol#L162,75
validation-400,Incorrect Credit Reduction in createCreditPosition() Leads to Protocol Insolvency,Invalid assumptions,Unsatisfactory,,76
validation-11,Potential Reentrancy Attack on the withdraw function in the Size Smart Contract,CEI well in place in DepositTokenLibrary.sol,Unsatisfactory,,76
validation-60,Unchecked Debt Position ID in `getDebtPositionByCreditPositionId` Function Leads to Potential Revert,Inadequate proof alleging the flaw,Unsatisfactory,,77
validation-402,Inconsistent Application of Fragmentation Fee in getCreditAmountOut() Function,fragmentationFee is paid by whoever causes the fragmentation,Unsatisfactory,,78
validation-54,Unchecked Repayment Amount Leads to Underflow Vulnerability in `repayDebt`,It's being circumvented at (repayAmount > debtPosition.futureValue),Unsatisfactory,,79
validation-398,Lender can extract more collateral than owed in self-liquidation,Incorrect perceptions on the current design,Unsatisfactory,,81
validation-275,Binary Search Function Returns Incorrect Indices,Devoid of coded POC alleging the claim,Unsatisfactory,,85
validation-273,Divergent Handling of Borrowing vs. Loan Exits,Intended design,Unsatisfactory,,86
validation-253,Chainlink's `latestRoundData` might return stale or incorrect results in `PriceFeed.sol`,Known readme issue,Unsatisfactory,,86
validation-57,Incorrect Credit Amount Calculation in `getCreditAmountIn` Function Due to Improper Fragmentation Fee Handling,fragmentationFee is paid by whoever causes the fragmentation,Unsatisfactory,,87
validation-553,A lender can Bypassing the validateUserIsNotBelowOpeningLimitBorrowCR  Check in BuyCreditMarket there breaking a main invariant,Intended design,Unsatisfactory,,88
validation-204,The miscalculation of maxCashAmountOut in SellCreditMarket.sol negatively impacts the Size protocol by hindering the accurate valuation and trading of existing credit positions.,DoS due to flawed limitation,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/BuyCreditMarket.sol#L162,88
validation-4,lead to a front-running attack due to the state variable,Intended design. Known Solidified issue 7.,Unsatisfactory,,90
validation-300,Impact of Loan Repayment Front-Running on Protocol Fees and Incentives (Overdue charges are not deduct when an overdue loan is repaid),Intended design. Known Solidified issue 7.,Unsatisfactory,,91
validation-130,Users may be incorrectly liquidated or denied access to certain features based on the incorrect collateral ratio.,Insufficient proof (lacking coded POC) alleging the flaw,Unsatisfactory,,92
validation-62,Inaccurate Collateral Assignment in `getDebtPositionAssignedCollateral` Function for Borrowers with Multiple `DebtPositions`,Incorrect assumptions,Unsatisfactory,,92
validation-168,USDC Collateral and WETH Debt Mismatch in collateralRatio Function,Insufficient proof (lacking coded POC) alleging the flaw,Unsatisfactory,,93
validation-52,Unvalidated Tenor Parameter Vulnerability in `getBorrowOfferAPR` and `getLoanOfferAPR`,Low QA on zero value check,Unsatisfactory,,93
validation-200,`executeBuyCreditMarket` Uses Lender Address Instead of Borrower for Existing Loans,Incorrect perceptions,Unsatisfactory,,96
validation-176,getDebtPositionAssignedCollateral Misuses Total Borrower Debt/Collateral (Liquidation),Incorrect assumptions,Unsatisfactory,,97
validation-131,Incorrect Collateral Ratio Calculation Due to Decimal Mismatch in Reverse Markets,Insufficient proof (lacking coded POC) alleging the flaw,Unsatisfactory,,99
validation-53, Inaccurate Collateral Token Amount Calculation Due to Unaccounted Decimal Difference in `debtTokenAmountToCollateralTokenAmount`,Insufficient proof (lacking coded POC) alleging the flaw,Unsatisfactory,,99
validation-397,Potential Violation of FEES_01 Invariant in getCashAmountOut() Function,fragmentationFee is paid by whoever causes the fragmentation,Unsatisfactory,,101
validation-205,getDebtPositionAssignedCollateral Reverts on Zero Debt with Non-Zero Collateral.,Incorrect assumptions,Unsatisfactory,,101
validation-193,Incorrect fee calculation in `getCashAmountOut()` results in overcharging users,Circumvented by (fees > maxCashAmountOut),Unsatisfactory,,102
validation-401,Violation of SOLVENCY_02 Invariant in createDebtAndCreditPositions() Function,Incorrect perceptions on the intended design,Unsatisfactory,,104
validation-135,Incomplete Debt Position Update in `LiquidateWithReplacement` Due Date Not Reset,Devoid of coded POC to allege the flaw,Unsatisfactory,,104
validation-134,`DebtInCollateralToken` Check Missing,Invalid assumptions on an intended design,Unsatisfactory,,104
validation-304,Fragmentation Fee Application Leads to Unfair Charges and Potential Fee Avoidance,Missing check for creditPositionWithDebtToRepay.credit > 0,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Compensate.sol#L146,105
validation-597,Unresolved For-Sale Status After Credit Adjustment in createCreditPosition Function,Invalid assumptions on an intended design,Unsatisfactory,,107
validation-277,Inaccurate Minimum Profit Check in LiquidateWithReplacement,Fee should indeed be factored in pre-calculation,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/RiskLibrary.sol#L98-L115,107
validation-619,Liquidation with Replacement Transfers All the liquidatorProfitBorrowToken to the Protocol's Fee Collector without Forwarding the Liquidator(KEEPER ROLE) and Liquidated User a share of the BorrowAtokenprofit,Low QA on protocol controlled function,Unsatisfactory,,108
validation-89,Misconfigured Modifier Allows Unauthorised Access to updateConfig Function within the Size contract,Compromised admin should be addressed in QA,Unsatisfactory,,108
validation-175,Inconsistent Fee Deduction in SellCreditMarket (exactAmountIn=false),params.amount as cash not catered for,Satisfactory,"https://github.com/SizeCredit/size-solidity/blob/539d14d06919830d07413ab04d3cd0a33740fc33/src/libraries/actions/BuyCreditMarket.sol#L91-L93, https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/SellCreditMarket.sol#L93",110
validation-172,executeLiquidateWithReplacement Miscalculates Rate for New Borrower (Liquidation),Devoid of coded POC to allege the flaw,Unsatisfactory,,111
validation-170,Debt Not Reduced in Debt Position During Self-Liquidation,Incorrect perceptions on the current design,Unsatisfactory,,114
validation-26,Incorrect Calculation in amountToWad Function within the Math library,Inadequate coded POC alleging the flaw,Unsatisfactory,,114
validation-207,Unsuccessful Aave Withdrawal Leads to BorrowAToken Burn,"Aave validateWithdraw() will revert if need be. If nothing is received still, 0 amount will be burned",Unsatisfactory,,122
validation-605,When a user Wants to Partially repay he/she is Fragmenting a Credit Position but the current implementation allows a user to Bypassing Fragmentation Fee payment even though the user still doesn't repay any of the fragmented loans ,Missing check for creditPositionWithDebtToRepay.credit > 0,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Compensate.sol#L146,125
validation-179,BuyCreditMarket: Missing Fee Deduction from Buyer Payment (exactAmountIn=true),params.amount as cash not catered for,Satisfactory,"https://github.com/SizeCredit/size-solidity/blob/539d14d06919830d07413ab04d3cd0a33740fc33/src/libraries/actions/BuyCreditMarket.sol#L91-L93, https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/SellCreditMarket.sol#L93",129
validation-209,`getCreditAmountOut` Doesn't Account for Swap Fee in Credit Fractionalization.,fragmentationFee is paid by whoever causes the fragmentation,Unsatisfactory,,133
validation-106,Unrestricted Proxy Initialisation in the Size contract,Bot: [Low-9]	Initializer function can be front run,Unsatisfactory,,134
validation-186,Insufficient fee check in `getCreditAmountOut` can lead to Underflow and incorrect credit calculation,fragmentationFee is paid by whoever causes the fragmentation,Unsatisfactory,,140
validation-81,Unauthorised access to buy and sell credit using the BuyCreditLimit library,Incorrect perceptions,Unsatisfactory,,140
validation-274,Incorrect BorrowAToken Mint in Deposit Underlying,Inadequate coded POC alleging the flaw,Unsatisfactory,,141
validation-133,Unfair Collateral Distribution in Self-Liquidation: Repay Fee Omitted from Assigned Collateral Calculation,Incorrect perceptions and devoid pf coded POC to allege the flaw,Unsatisfactory,,141
validation-210,Lender Mismatch When Creating New Credit Positions,Incorrect perceptions,Unsatisfactory,,142
validation-312,Inconsistent Debt Position State and Outdated Future Value Usage in Liquidation Replacement Process Could Lead To Bad Accounting,Devoid of coded POC to allege the flaw,Unsatisfactory,,146
validation-171,validateSelfLiquidate Uses Borrower's Overall Collateral Ratio ,Incorrect perceptions on the current design,Unsatisfactory,,149
validation-136,Incorrect Calculation Due to Order of Operations,Incorrect perceptions on the current design,Unsatisfactory,,149
validation-56,Missing Update in `createCreditPosition` Function Leads to Inconsistent Credit Position Tracking.,Inadequate coded POC alleging the flaw,Unsatisfactory,,149
validation-279,Unbounded loop in `multicall` tolerates DoS attacks by exploiting excessive gas consumption,Low QA frequently reported by the bot,Unsatisfactory,,151
validation-573,Potential DOS for buy credit market and sell credit market ,Low on zero value check,Unsatisfactory,,155
validation-82,Extremely High Gas Consumption on the Multicall library,Low QA frequently reported by the bot,Unsatisfactory,,160
validation-583,A Lenders address can be matched against his borrow offer in the Liquidated with Replacement Function thereby leading to loss of funds by the lender.,Devoid of coded POC to allege the flaw,Unsatisfactory,,176
validation-12, I found several potential vulnerabilities and weak points that a hacker could potentially exploit,Incorrect assumptions and perceptions,Unsatisfactory,,178
validation-298,Issues Arising from Liquidation Reward Misvaluation/Miscalculation,18 decimal debtInCollateralToken NOT used,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L96-L99,182
validation-177,getCreditAmountOut Miscalculates Credit Due to Doubled Swap Fee (Fragmentation),fragmentationFee is paid by whoever causes the fragmentation,Unsatisfactory,,199
validation-14,10 Vonalblity of smart contact ,Incorrect assumptions and perceptions,Unsatisfactory,,199
validation-387,Incorrect credit decrement logic in compensation mechanism doesn't limit multiple debt reductions with single credit position,Invalid assumptions and practically infeasible,Unsatisfactory,,242
validation-299,Insufficient validation of APR in `executeSellCreditMarket` permits manipulation resulting in miscalculated cash amounts and fees,Intended design. Known Solidified issue 7,Unsatisfactory,,285
validation-259,Flawed liquidation reward calculation in `executeLiquidation` allows over-compensation of liquidators due to improper use of collateral value,18 decimal debtInCollateralToken NOT used,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L96-L99,295
validation-530,Manipulation of collateral ratios in `SelfLiquidate` via precision and timing exploits leading to unjust collateral extraction,Incorrect perceptions on the current design,Unsatisfactory,,301
validation-260,Insufficient validation of credit position transferability in `validateSellCreditMarket` leads to at-risk credit transfers and possible systemic risk,Intended design. Known Solidified issue 7,Unsatisfactory,,339
validation-641,Inadequate liquidation logic in `multicall` facilitates strategic abuse throughout bypass of liquidation checks in batched operations,Impractical proof on an intended design,Unsatisfactory,,384
validation-703,Improper liquidation profit calculation on `validateMinimumCollateralProfit` due to omission of protocol fee,Fee should indeed be factored in pre-calculation,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/RiskLibrary.sol#L98-L115,385
validation-379,Unauthorized access via `delegatecall` in `setUserConfiguration` allows malicious user configuration alterations and manipulation of credit position IDs on behalf of other users,creditPosition.lender != msg.sender in validateSetUserConfiguration will take care of it,Unsatisfactory,,410
validation-381,Arbitrary debt forgiveness and unauthorized credit reduction exploit in `compensate` logic due to insufficient validation checks,Invalid assumptions and practically infeasible,Unsatisfactory,,478
validation-372,Fragmentation fee and fee calculation in Sell Credit Market is Wrong leading to the payment of less or overpayment when using Credit and Cash.,fragmentationFee is paid by whoever causes the fragmentation,Unsatisfactory,,568