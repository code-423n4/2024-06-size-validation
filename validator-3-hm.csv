issue,title,validator comment,grade,root cause (URL),size
validation-394,manipulate rates of aave based rates,Insufficient proof,Unsatisfactory,,17
validation-212,No incentives to write off bad debt when remaining collateral is very small,Illiquid dust debt,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/Size.sol#L210-L220,19
validation-27,Reentrancy Vulnerability in multicall Function,No actual scenario given,Unsatisfactory,,20
validation-437,Centralization Risk for trusted owners in NonTransferrableToken.sol,Centralization should be addressed in QA,Unsatisfactory,,21
validation-434,Liquidation and Self-Liquidation functions could be paused by Owner and lead to user loss of funds if their collateral value is dropping within that period ,Known readme issue,Unsatisfactory,,21
validation-427,H-3: Inability to Withdraw ETH in Size.sol ,Withdrwal in WETH only,Unsatisfactory,,21
validation-567,"when a borrow Order is filled via Size::liquidateWithReplacement, the borrower does not end up paying for swap fees",Intended design,Unsatisfactory,,22
validation-220,No storage gaps in `Size.sol`,Bot: [Low-7]	Upgradable contracts should have a __gap variable,Unsatisfactory,,22
validation-184,Lack of Loan Status Check in `createCreditPosition` Function Allows Modification of Non-Active Loans,Insufficient proof,Unsatisfactory,,22
validation-80,Some functions doesn't utilize the whenNotPaused modifier,Protocol design,Unsatisfactory,,22
validation-716,reentrancy in accountinglibrary.sol,Low CEI frequently reported by the bots. Invalid assumtions too,Unsatisfactory,,23
validation-672,No storage gaps in `SizeView.sol`,Bot: [Low-7]	Upgradable contracts should have a __gap variable,Unsatisfactory,,23
validation-651,Oracle will return wrong price if price goes out of chainlink's minanswer/maxanswer,No longer needed per Chainlink,Unsatisfactory,,23
validation-491,anyone can repay with a different token,Invalid assumptions and insufficient proof,Unsatisfactory,,23
validation-107,[M-02] Incorrect rounding down in `PriceFeed::getPrice()` function can lead to precision loss,Bot: [Low-11] Loss of precision,Unsatisfactory,,23
validation-490,anyone can compensate with different token,Invalid assumptions and insufficient proof,Unsatisfactory,,24
validation-161,Whales might not be able to get liquidated due to no way to partially liquidate,Likely whale impedence,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L118,24
validation-472,Usage of an incorrect version of Ownable library ,Bot: [NonCritical-83] Consider using the Upgradeable version of the OpenZeppelin libraries/contracts,Unsatisfactory,,25
validation-468,Pausing Prevents Closure and Liquidation of Outstanding Loan ,Known readme issue,Unsatisfactory,,25
validation-389,Malicious actors can do block stuffing and liquidate a debt to profit when repayment is close to the dueDate timestamp.,Commonly known front-running issue,Unsatisfactory,,25
validation-72,ISizeAdmin contract imported but not inherited.,Won't compile if there's any error,Unsatisfactory,,25
validation-495,repay does not transfer excess,Will revert and be circumvented by debtPosition.futureValue -= repayAmount in AccountingLibrary.sol,Unsatisfactory,,26
validation-429,Loss of funds for protocol as incorrect rounding is implemented,Low and inconsequential,Unsatisfactory,,26
findings-133,The user's funds may all be used to submit the transaction fee,Already checked and circumvented by state.feeConfig.fragmentationFee > cashAmountIn,Unsatisfactory,,26
findings-77,`repay` is not callable during a pause, Overdue liquidations not catered for,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/Size.sol#L198,26
validation-467,Setting `baseStalePriceInterval` and `quoteStalePriceInterval` as immutable possesses a risk,Known readme issue,Unsatisfactory,,27
validation-349,CreditBuyers can bring down the CollateralRatio of CreditSellers by generating new loans instead of buying credit from an existing position the CreditSellers put on sale.,Insufficient proof alleging the flaw,Unsatisfactory,,27
validation-189,Incorrect Validation Logic in UpdateConfig.sol,Invalid assumptions and insufficient proof,Unsatisfactory,,27
validation-431,Incorrect validation to determine liquidatorReward ,18 decimal debtInCollateralToken NOT used,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L96-L99,28
validation-314,Solidity version >= 0.8.20 will not work on Base due to PUSH0,Insufficient proof. It's Linea that's not ready. Base is fine,Unsatisfactory,,28
validation-234,The ChainLink Oracle in `PriceFeed.sol` could return the wrong price since there are no min/max Circuit breaker checks. breaker checks,No longer needed per Chainlink,Unsatisfactory,,28
validation-678,No Storage Gap for Upgradeable Contract Might Lead to Storage Slot Collision,Bot: [Low-7]	Upgradable contracts should have a __gap variable,Unsatisfactory,,29
validation-564,Borrower are not able to repay debt when protocol is paused.,Known readme issue,Unsatisfactory,,29
findings-75,Underwater liquidations don't take into account the borrower's future cash flows to compensate his debt,Missing check on first defense,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L37-L44,29
findings-3,PriceFeed doesn't check min/max price boundaries,No longer needed per Chainlink,Unsatisfactory,,29
validation-690,DOS possible when selling credit through market,Insufficient proof alleging the flaw,Unsatisfactory,,30
validation-602,Users can not withdraw and use their borrowed USDC tokens if their collateral ratio is below openingLimitBorrow CR,Intended and known issue,Unsatisfactory,,30
validation-532,APR Calculation is Favoring the Borrower Instead of the Lender,Inconsequential low issue,Unsatisfactory,,30
validation-227,Attackers can frontrun forSale - false  and  allCreditPositionsForSaleDisabled - true  for a creditpositonid and buy the creditpositionid.,Intended design. Known Solidified issue 7,Unsatisfactory,,30
validation-167,Debt repayment and collateral loss risk if Size contract is paused,Known readme issue,Unsatisfactory,,30
validation-114,A attacker can fill up the whole block at near the end of a loan to prevent the borrower from repaying and then profit from the liquidation process,Commonly known front-running issue,Unsatisfactory,,30
validation-611,"`executeLiquidateWithReplacement` rounds in the wrong direction, breaking an invariant",Inconsequential low issue,Unsatisfactory,,31
validation-578,Incorrect validation in Size.sol causes unexpected reverts,Insufficient proof alleging the flaw,Unsatisfactory,,31
validation-533,Protocol Profits Should Round in Favor of the Protocol and Not the Liquidated Borrower,Low and inconsequential,Unsatisfactory,,31
validation-264,"Protocol Doesn't Implement Extra Reward Claiming from Aave, leading to a loss of yield",Insufficient proof alleging the flaw,Unsatisfactory,,31
validation-35,Missing check in `validateMinimumCreditOpening` function,Insufficient proof alleging the flaw,Unsatisfactory,,31
validation-308,Users can end up with unwanted debt,Intended design,Unsatisfactory,,32
validation-92,Whales can DoS the usage of the protocol,Intended design. Known Solidified issue 7,Unsatisfactory,,32
findings-106,By only taking into account the liquidatorProfit when calling liquidateWithReplacement() the caller might miss out on profitable liqudations,liquidatorProfit in borrow tokens not catered for,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/LiquidateWithReplacement.sol#L147,32
findings-30,Lender can be forced to pay swap and fragmentation fees on claimable credit amounts,Insufficient proof alleging claimed amount is available for borrow without lender's control,Unsatisfactory,,32
validation-616, Mishandling of ETH in the [Liquidate::executeLiquidateWithReplacement] can lead to accounting error and siphoning of fund by malicious user,Insufficient proof alleging the flaw,Unsatisfactory,,33
validation-563,Frontrunning risk for `setUserConfiguration` function for very profitable CreditPositions,Intended design. Known Solidified issue 7,Unsatisfactory,,33
validation-288,No mechanism to protect `DebtPositions` that become overdue during Protocol Pause from liquidations,Known readme issue,Unsatisfactory,,33
validation-201,Borrower should always get liquidated from the smaller debt position. ,Liquidation should be in ascending size ,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L75,33
validation-165,Inadequate safety parameters validation -- missing the check of a gap as the buffer zone between crOpening and crLiquidation,Insufficient proof alleging the flaw,Unsatisfactory,,33
validation-144,Attaching payable modifier to external functions not handling msg.value will lead to locking of funds,Low QA as caller needs beware of mistake,Unsatisfactory,,33
validation-571,Lack of function `claimReward()` to claim reward,Insufficient proof alleging the flaw,Unsatisfactory,,34
validation-433,Missing Return Statement in approve Function of NonTransferrableToken.sol,This function is not supported,Unsatisfactory,,34
validation-653,The `validateBorrowATokenIncreaseLteDebtTokenDecrease` is incorrect and can be easily bypassed,Invalid validation entailed,Satisfactory,"https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/Multicall.sol#L29, https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/Multicall.sol#L37",35
validation-603,Users can not delete a BorrowOffer while the protocol is paused leading to an unwanted loans when the protocol continues operating which he will have to pay fees for.,Known readme issue,Unsatisfactory,,35
validation-600, Missing check for zero value of msg.value can cause a DoS attack on the deposit function,(params.amount == 0) will make a revert,Unsatisfactory,,35
validation-546,All transactions in which CapsLibrary::validateVariablePoolHasEnoughLiquidity is called revert,Incorrect address reference,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/CapsLibrary.sol#L60-L75,35
validation-489,aave pool not integrated correctly ,Similar to known readme on Chainlink configuration,Unsatisfactory,,35
validation-416,incorrect check for cash against credit makes check redundant,params.amount as cash not catered for,Satisfactory,"https://github.com/SizeCredit/size-solidity/blob/539d14d06919830d07413ab04d3cd0a33740fc33/src/libraries/actions/BuyCreditMarket.sol#L91-L93, https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/SellCreditMarket.sol#L93",35
validation-228,There is a missing check when compensating of a credit position.,Intended design,Unsatisfactory,,35
validation-222,Liquidators are unfairly robbed of their liquidation reward,18 decimal debtInCollateralToken NOT used,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L96-L99,35
validation-127,Bad debt cannot be liquidated when contract is paused,Known readme issue,Unsatisfactory,,35
findings-137,Incorrect assumption about params.amount can cause DoS for specific executions,params.amount as cash not catered for,Satisfactory,"https://github.com/SizeCredit/size-solidity/blob/539d14d06919830d07413ab04d3cd0a33740fc33/src/libraries/actions/BuyCreditMarket.sol#L91-L93, https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/SellCreditMarket.sol#L93",35
validation-487,the user can be frontrunned and forcefully liquidated,Intended design. Known Solidified issue 7,Unsatisfactory,,36
validation-411,Findings Report for Self-Liquidation Vulnerability in SelfLiquidate.sol,Insufficient proof alleging the flaw,Unsatisfactory,,36
validation-113,Users can deposit USDC above the AToken cap,Insufficient proof alleging the flaw,Unsatisfactory,,36
validation-94,Numerous different ways for users to create offers that are impossible to take,Low QA on orderbook spamming. Infeasible in this context,Unsatisfactory,,36
validation-86,Storage Could Be Corrupted During an Upgrade,Bot: [Low-7]	Upgradable contracts should have a __gap variable,Unsatisfactory,,36
findings-104,Liquidator profit collateral is underestimated due to an inconsistency in units,18 decimal debtInCollateralToken NOT used,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L96-L99,36
validation-693,Inflexibility in Adjusting `crLiquidation` Value in Smart Contract Settings,Low QA on protocol controlled function,Unsatisfactory,,37
validation-612,profit margin when liquidating small positions might not be enough to cover liquidator costs ,Low QA on protocol current design,Unsatisfactory,,37
validation-601,Users can not deposit and repay their loans if the contract is paused leading to unintended and uncontrollable overdue liquidations,Known readme issue,Unsatisfactory,,37
validation-593,Through `liquidateWithReplacement` a borrower can avoid paying swap fees,Intended design,Unsatisfactory,,37
validation-581,Chainlink's `latestRoundData` Might Return Stale Results,Known readme issue,Unsatisfactory,,37
validation-536,"When both `low` and `high` are large enough value, overflow will occur",Low QA reported by bot,Unsatisfactory,,37
validation-421,Incomplete check to protect credit sellers in sellCreditMarket,Insufficient proof. Checks already well in place,Unsatisfactory,,37
validation-166,"The updateConfig about the `crLiquidation` is currently using a risky design, but there is a safer design for it",Low QA on protocol controlled function,Unsatisfactory,,37
validation-111,Wrong calculation of `liquidatorReward` in `executeLiquidate`,18 decimal debtInCollateralToken NOT used,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L96-L99,37
validation-31,`latestRoundData()` Call May Result Stale,Known readme issue,Unsatisfactory,,37
findings-145,"While buying/selling credit markets, it might revert when it should work due to the `minimumCreditBorrowAToken` validation.",params.amount as cash not catered for,Satisfactory,"https://github.com/SizeCredit/size-solidity/blob/539d14d06919830d07413ab04d3cd0a33740fc33/src/libraries/actions/BuyCreditMarket.sol#L91-L93, https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/SellCreditMarket.sol#L93",37
findings-130,Incorrect calculation of deposit amount using address(this).balance,"Readme: This means leftover amounts, if sent forcibly, are always credited to the depositor.",Unsatisfactory,,37
findings-94,Validations aren't sufficient to prevent reorg issues,Infeasible per the described POC,Unsatisfactory,,37
findings-72,Liquidator rewards are incorrectly calculated ,18 decimal debtInCollateralToken NOT used,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L96-L99,37
validation-717,Insufficient access control on Default admin which can compromise the protocol,"_grantRole(DEFAULT_ADMIN_ROLE, owner) will take care of it",Unsatisfactory,,38
validation-706,"`YieldCurveLibrary.getAPR` rounds in different directions, returning unexpected results",Low and inconsequential,Unsatisfactory,,38
validation-622,"Users are able to split their debt position at no cost, allowing them to delay or even prevent liquidation",Missing check for creditPositionWithDebtToRepay.credit > 0,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Compensate.sol#L146,38
validation-444, Using ERC721::\_mint() Can Be Dangerous in NonTransferrableToken.sol,Low QA frequently reported by the bots,Unsatisfactory,,38
validation-424,Unauthorized Token Transfer Risk in SellCreditMarket.sol,Bot: [Low-20] Unsafe use of transfer()/transferFrom() with IERC20,Unsatisfactory,,38
validation-119,Malicious actor could change core protocol's configuration params,Infeasible per the described POC,Unsatisfactory,,38
validation-73,Incorrect `withdrawUnderlyingTokenFromVariablePool` Implementation,CEI frequently reported by the bots,Unsatisfactory,,38
validation-576,Liquidators can prevent users from making their positions healthy during an unpause.,Known readme issue,Unsatisfactory,,39
validation-561,`validateVariablePoolHasEnoughLiquidity`'s checking condition can be bypassed.,Incorrect address reference featuring a sandwich attack,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/CapsLibrary.sol#L60-L75,39
validation-423,No check that the variable pool balance is greater than the amount of cash being transferred ,Insufficient proof alleging the flaw,Unsatisfactory,,39
validation-409,There's no liquidation incentive for small positions which can lead to the accrual of bad debt,Illiquid dust debt,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L95-L100,39
validation-218,A lender can lose borrowAmount when another lender buys his creditpositionid,Intended design. Incorrect assumptions in this context,Unsatisfactory,,39
findings-148,`executeLiquidateWithReplacement()` doesn't validate `minimumCreditBorrowAToken` while replacing a debt position.,Low QA as it's handled by the protocol team,Unsatisfactory,,39
validation-726,Incorrect validation in `SellCreditMarket.sol` causes the function to fail unexpectedly and prevents from borrowing being performed,params.amount as cash not catered for,Satisfactory,"https://github.com/SizeCredit/size-solidity/blob/539d14d06919830d07413ab04d3cd0a33740fc33/src/libraries/actions/BuyCreditMarket.sol#L91-L93, https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/SellCreditMarket.sol#L93",40
validation-635,Invalid validation in `UpdateConfig.sol` prevents the swap fee apr from being more than the minimum,Low QA on protocol controlled function,Unsatisfactory,,40
validation-370,"The `BuyCreditLimit::validateBuyCreditLimit` method incorrectly uses `minTenor` instead of `maxTenor`, potentially allowing `LoanOffer` creation that exceeds the maximum due date.",Insufficient proof alleging the flaw,Unsatisfactory,,40
validation-182,Invalid `price` check,No longer needed per Chainlink,Unsatisfactory,,40
validation-162,Users might not be able to withdraw USDC from the protocol,Balance might run low,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/CapsLibrary.sol#L67-L72,40
validation-126,Malicious user can reduce victim's credit amount,Intended design. Known Solidified issue 7,Unsatisfactory,,40
validation-93,Some users will be required to borrow a higher amount of tokens than others,params.amount as cash not catered for,Satisfactory,"https://github.com/SizeCredit/size-solidity/blob/539d14d06919830d07413ab04d3cd0a33740fc33/src/libraries/actions/BuyCreditMarket.sol#L91-L93, https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/SellCreditMarket.sol#L93",40
validation-613,Impact of Variable Pool (Aave v3) Failures on Size Protocol's Liquidation Process,Known readme issue,Unsatisfactory,,41
validation-465,DOS of  liquidateWithReplacement becuase issuance value might round to zero due to low apr and low tenor ,Low QA on protocol called function,Unsatisfactory,,41
validation-343,Price feed contract does not check for minAnswer and maxAnswer,No longer needed per Chainlink,Unsatisfactory,,41
findings-103,Compensate allows lenders to transfer bad credit positions before an oracle update,Commonly known issue in front-running,Unsatisfactory,,41
validation-729,Malicious actor can enforce liquidation to a user,Commonly known and infeasible issue in this context. POC lacks proof,Unsatisfactory,,42
validation-689,Vulnerabilities in Borrowing Mechanism Due to Limit Orders Not Cleared When Borrower Reaches Max Borrow Limit,Intended design. Known Solidified issue 7. Infeasible in the context after all,Unsatisfactory,,42
validation-659,Overdue fees potentially penalize collateralization,Flawed calculation affecting borrower with healthier collateral ratio status,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L90-L113,42
validation-625,Chainlink price feed will return the wrong price for USDC if underlying aggregator hits minAnswer,No longer needed per Chainlink,Unsatisfactory,,42
validation-464,`liquidate()` doesn't have a deadline parameter makes it susceptible to MEV manipulation,Known readme issue,Unsatisfactory,,42
validation-329,Borrowers do not pay any swap fees during liquidation with replacement,Intended design,Unsatisfactory,,42
validation-214,"Bad amount validation could lead to DoS, when `sellCreditMarket` called",params.amount as cash not catered for,Satisfactory,"https://github.com/SizeCredit/size-solidity/blob/539d14d06919830d07413ab04d3cd0a33740fc33/src/libraries/actions/BuyCreditMarket.sol#L91-L93, https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/SellCreditMarket.sol#L93",42
validation-713,"`BuyCreditMarket.executeBuyCreditMarket` limits the maximum cash amount input more than is expected, causing calls that should be valid to fail",DoS due to flawed limitation,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/BuyCreditMarket.sol#L162,43
validation-655,The [selfLiquidate::executeSelfLiquidate] is missing a step to account for transferring collateral to the lender and any other entity after self Liquidation,Incorrect assumptions and inadequate proof,Unsatisfactory,,43
validation-408,Arbitrary `from` passed to `transferFrom` (or `safeTransferFrom`) in Liquidate.sol,[Low-20] Unsafe use of transfer()/transferFrom() with IERC20,Unsatisfactory,,43
validation-384,No storage gap for upgradeable contracts,Bot: [Low-7]	Upgradable contracts should have a __gap variable,Unsatisfactory,,43
validation-355,Input validation of [repayAmount] in [repayDebt] function,Insufficient proof,Unsatisfactory,,43
validation-330,"Absense of a minCredit amount in limit orders, could expose users to unfavourable or unprofitable matches",Informational on current design,Unsatisfactory,,43
validation-190,Liquidated user is favored instead of liquidator when calculating the debt positions assigned collateral,Low inconsequential,Unsatisfactory,,43
findings-29,Rounding against the protocol will result in less rewards,Low QA and Inconsequential. It seems protocol intended with the use of Math.min too,Unsatisfactory,,43
validation-639,Withdrawal can fail even if user is not underwater,Intended and known issue,Unsatisfactory,,44
validation-442,Using `ERC721::_mint()` can be dangerous in NonTransferrableToken.sol,Low QA frequently reported by the bots,Unsatisfactory,,44
validation-425,legitimate selfLiquidate can be stopped by users looking to earn liquidation profit,Incorrect assumptions and inadequate proof,Unsatisfactory,,44
validation-364,"Protocol pausing during market volatility can prevent lenders from self-liquidating debt, potentially leading to significant financial losses.",Known readme issue,Unsatisfactory,,44
validation-223,Borrowers can frontrun lenders to decrease apr and lenders can frontrun borrowers to increase apr.,Intended design. Known Solidified issue 7,Unsatisfactory,,44
findings-124,A user can be in a loan all by himself - being the lender and the borrower of the same loan,No lender would do it for an immediate loss,Unsatisfactory,,44
findings-120,Credit buyers can't use a longer due date than the due date of for sale credit position,Intended design,Unsatisfactory,,44
validation-520,Liquidators can steal borrowers collateral tokens due to wrong assumption.,18 decimal debtInCollateralToken NOT used,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L96-L99,45
validation-388,Users cant withdraw borrowATokens if they are under the opening collateral limit,Intended and known issue,Unsatisfactory,,45
validation-373,Centralization Risk in Role Management,Centralization should be addressed in QA,Unsatisfactory,,45
validation-362,Reentrancy Attack is possible.,CEI frequently reported by the bots,Unsatisfactory,,45
validation-187,liquidatorReward is Incorrectly calculated: Inconsistent Units,18 decimal debtInCollateralToken NOT used,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L96-L99,45
validation-146,"Approvals can be revoked by the token owner, leading to liquidations being reverted",Invalid assumptions and insufficient proof,Unsatisfactory,,45
validation-96,Borrowers might not be able to withdraw their borrowed tokens due to a very insufficient check,Balance might run low,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/CapsLibrary.sol#L67-L72,45
validation-725,Lenders can claim far more tokens,Unatructured proof,Unsatisfactory,,46
validation-662,`NonTransferrableScaledToken` uses wrong unscaled calculation.,Unatructured proof,Unsatisfactory,,46
validation-569,`liquidatorProfitBorrowToken` send to wrong address,Insufficient proof,Unsatisfactory,,46
validation-476,`_getPrice()` doesn’t check for the `min`/`max` prices returned,No longer needed per Chainlink,Unsatisfactory,,46
validation-49,"This vulnerability can lead to unauthorized configuration changes, potentially resulting in significant security and operational risks.",creditPosition.lender != msg.sender in validateSetUserConfiguration will take care of it,Unsatisfactory,,46
validation-656,Debt Token Repayment Mechanism Allows Users to Exploit USDC Depreciation,Commonly known issue in front-running,Unsatisfactory,,47
validation-443,The new borrower in `LiquidateWithReplacement` is not charged swapping fee,Intended design,Unsatisfactory,,47
findings-60,"If a user has placed both a buy limit order and a sell limit order, and the sell limit order has a lower APR, the user will be vulnerable to arbitrage.",Incorrect assumptions and perceptions,Unsatisfactory,,47
findings-28,Borrower will not be charged fragmentation fee when creating new credit position when compensating a credit partially,Missing check for creditPositionWithDebtToRepay.credit > 0,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Compensate.sol#L146,47
findings-11,"The initiator should pay the fragmentation fees in the sellCreditMarket function, rather than the lender.",Insufficient proof alleging the flaw,Unsatisfactory,,47
validation-531,Liquidate & Self-Liquidate Should Have 100% Uptime,Known readme issue,Unsatisfactory,,48
validation-521,Incorrect Handling of Cash Amount Validation in BuyCreditMarket Function,params.amount as cash not catered for,Satisfactory,"https://github.com/SizeCredit/size-solidity/blob/539d14d06919830d07413ab04d3cd0a33740fc33/src/libraries/actions/BuyCreditMarket.sol#L91-L93, https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/SellCreditMarket.sol#L93",48
validation-504,Valid market lending and borrowing can be denied as `exactAmountIn` value is ignored in controls,params.amount as cash not catered for,Satisfactory,"https://github.com/SizeCredit/size-solidity/blob/539d14d06919830d07413ab04d3cd0a33740fc33/src/libraries/actions/BuyCreditMarket.sol#L91-L93, https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/SellCreditMarket.sol#L93",48
validation-278,Executing nested `Multicall::multicall` functions as calldata to `Multicall::multicall` can lead to state inconsistencies and increase the risk of reentrancy attacks.,No actual scenario given,Unsatisfactory,,48
validation-237,Repay and liquidate are pausable but no grace period applied to liquidations after protocol gets unpaused which would lead to unfair liquidations of users,Known readme issue,Unsatisfactory,,48
validation-154,Inability to perform partial liquidations allows huge positions to does not get liquidate ,Likely whale impedence,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L118,48
findings-143,Inconsistent liquidity validation for a variable pool,Insufficient proof alleging the flaw,Unsatisfactory,,48
findings-43,Admin config lack of some validation for `crLiquidation` and `crOpening`,Low QA on admin controlled input parameter,Unsatisfactory,,48
findings-5,The debtor can be liquidated if his loan due date has come while the protocol is in the paused state, Overdue liquidations not catered for,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/main/src/libraries/LoanLibrary.sol#L135-L136,48
validation-457,Grief the Protocol by filling all the debtPosition and creditPosition slots available without  facing any loss to the attacker - Compensate.sol,Low QA on spamming. POC lacks proof,Unsatisfactory,,49
validation-383,Unchecked External Call in Multicall Function,Taken care of by OZ verifyCallResultFromTarget in Address.sol,Unsatisfactory,,49
validation-331,User funds could get stuck or unexpected reverts could occur,Insufficient proof alleging the flaw,Unsatisfactory,,49
validation-315,Full liquidations of debt positions risks putting the protocol in bad debt,Likely whale impedence,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L118,49
validation-180,Missing check for `RoundID`,Known readme issue,Unsatisfactory,,49
validation-75,Insufficient Validation in Liquidation Function Leading to Potential Fund Loss,Insufficient proof alleging the flaw,Unsatisfactory,,49
findings-149,No `minCollateralOut/deadline` validation in `selfLiquidate()`.,Inconsequential for the context entailed,Unsatisfactory,,49
findings-40,Lender-Enforced 150% Collateral Ratio Creates Extreme Risk for Borrowers,Seemingly known readme issue,Unsatisfactory,,49
validation-515,Inability to Update Aave Variable Pool Address in Configuration Update Function,Similar to known readme on Chainlink configuration,Unsatisfactory,,50
validation-395,Insufficient validation of an Oracle data feed,Known readme issue,Unsatisfactory,,50
validation-270,[M-2] Missing Validation for `crOpening` and `crLiquidation` in `UpdateConfig::executeUpdateConfig` could lead to risky parameters,Invalid assumptions and insufficient proof,Unsatisfactory,,50
validation-265,Validation logic in `validateVariablePoolHasEnoughLiquidity()` is inaccurate with the introduction of virtual Accounting in AAVE3.1,Incorrect address reference,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/CapsLibrary.sol#L60-L75,50
findings-32,Fragmentation fee not refunded if the claimer is the credit position owner,Insufficient proof alleging the flaw,Unsatisfactory,,50
validation-709,PriceOracle will use the wrong price if the Chainlink registry returns price outside min/max range.,No longer needed per Chainlink,Unsatisfactory,,51
validation-696,Missing Access Control,Infeasible per the described POC,Unsatisfactory,,51
validation-528,Certain configurations of liquidationRewardPercent could disincentivize liquidators,Low QA on trusted admin parameter control,Unsatisfactory,,51
validation-523,The `borrowATokenCap` will be reached earlier than expected,Incorrect caps logic,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/CapsLibrary.sol#L52-L59,51
validation-439,Users can not compensate with `creditPositionToCompensateId = RESERVED_ID` at the end of the loan,Insufficient proof,Unsatisfactory,,51
validation-251,Lack of Slippage Protection in Limit Orders Allows for Unfavorable Deals via MEV,Known readme issue,Unsatisfactory,,51
findings-141,`LiquidateWithReplacement.executeLiquidateWithReplacement()` should charge a swap fee from a new borrower.,Intended design,Unsatisfactory,,51
validation-688,Liquidations can't be profitable due to wrong decimals used in `executeLiquidate()`,18 decimal debtInCollateralToken NOT used,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L96-L99,52
validation-671,PriceFeed contract fails to handle Chainlink aggregator minAnswer/maxAnswer thresholds,No longer needed per Chainlink,Unsatisfactory,,52
validation-558,"Liquidator reward is calculated wrongly, causing it to be extremely low, not incentivising for liquidations to be made",18 decimal debtInCollateralToken NOT used,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L96-L99,52
validation-284,"protocol blocks partial repayment, even though they improve borrowers health in certain conditions",Inadequate remediation for underwater borrowers,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/Size.sol#L250,52
validation-91,unhandled return value for transferFrom() call during self liquidation,"Bot: [Low-20] Unsafe use of transfer()/transferFrom() with IERC20
",Unsatisfactory,,52
validation-38,"Borrowers can partially pay back and leave a small borrowing amount in their position, leading to the protocol's bad debt",Illiquid dust debt,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/Size.sol#L210-L220,52
validation-704,Incorrect Liquidator Reward Calculation Due to Mismatched Token Denominations,18 decimal debtInCollateralToken NOT used,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L96-L99,53
validation-469,Protocol Fee isn't collected in liquidate with replacement,Intended design,Unsatisfactory,,53
validation-342,"SellingCredit can incorrectly reverts because `params.amount` is incorrectly threated as if it would represent `credit`, when in reality could represent `cash` and the credit been sold would be grather than minimumCreditBorrowAToken",params.amount as cash not catered for,Satisfactory,"https://github.com/SizeCredit/size-solidity/blob/539d14d06919830d07413ab04d3cd0a33740fc33/src/libraries/actions/BuyCreditMarket.sol#L91-L93, https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/SellCreditMarket.sol#L93",53
validation-295,Arbitrary `from` passed to `transferFrom` (or `safeTransferFrom`) in DepositTokenLibrary.sol,[Low-20] Unsafe use of transfer()/transferFrom() with IERC20,Unsatisfactory,,53
validation-110,Users can not withdraw USDC when they are below the opening limit borrow CR,Intended and known issue,Unsatisfactory,,53
findings-139,`Liquidate.executeLiquidate()` calculates `liquidatorReward` incorrectly.,18 decimal debtInCollateralToken NOT used,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L96-L99,53
validation-691,lender can not liquidate self even though loan is overdue unless borrower's debt position is not underwater. ,Intended design,Unsatisfactory,,54
validation-575,minTenor check in validateCompensate() will DOS loan compensation,Intended design,Unsatisfactory,,54
validation-473,Incorrect logic to protect Size from large amount of loans,Incorrect caps logic,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/CapsLibrary.sol#L52-L59,54
validation-453,Borrower cannot save himself from liquidation by paying partial debt - Compensate.sol,Inadequate remediation for underwater borrowers,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/Size.sol#L250,54
validation-428,Inability to Withdraw ETH in Size.sol ,Withdrwal in WETH only,Unsatisfactory,,54
validation-332,LiquidatorReward is not properly calculated,18 decimal debtInCollateralToken NOT used,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L96-L99,54
validation-252,inconsistency in variable pool liquidity validation,Insufficient proof alleging the flaw,Unsatisfactory,,54
validation-242,Users can front/backrun the updates to the variable rates and still have a relatively lower position for their borrows on the yield curve,Intended design. Known Solidified issue 7. Infeasible in the context after all,Unsatisfactory,,54
validation-194,Mistakenly sent eth could be locked,Low QA on user's mistakes,Unsatisfactory,,54
validation-34,State Inconsistency Due to Unhandled Revert in `multicall` Function,No actual scenario given,Unsatisfactory,,54
validation-25,"Gas Optimization, Code Readability and Documentation, Security Enhancements, Library Use, Explicit Visibility, Function Modifiers",Low QA,Unsatisfactory,,54
validation-680,Precision Loss in Scaled Token Burns Due to Incorrect Rounding,Low inconsequential,Unsatisfactory,,55
validation-39,SizeStorage:Corruptible Upgradability Pattern in State structs,Bot: [Low-7] Upgradable contracts should have a __gap variable,Unsatisfactory,,55
findings-74,Overcollaterized users can withdraw their collateral in anticipation of liquidation,Intended design,Unsatisfactory,,55
validation-652,Inability to Compensate Debt with Credit of Equal Due Date,Intended design,Unsatisfactory,,56
validation-644,Incorrect Credit Position Update in `CreateCreditPosition` Function,Invalid assumptions on an intended design,Unsatisfactory,,56
validation-351,When a creditPosition is transferred to a new lender when calling `compensate` it is not ensured that the creditPosition is forSale,forSale leak,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Compensate.sol#L118-L145,56
validation-271,Missing check on loan repayment resulting in free credits,Invalid assumptions,Unsatisfactory,,56
validation-142,Missing a necessary validation for tenor which can allow the tenor to be lower than the min threshold set by the protocol safety parameter,Insufficient proof alleging the flaw while admins are trusted on updating new parameters,Unsatisfactory,,56
findings-67,LiquidateWithReplacement should round up issuanceValue instead of rounding down.,Low QA and inconsequential,Unsatisfactory,,56
validation-673,Any one can call `Size.claim` function thus depriving the lender of extra interest accrual,Inconsequential as long as the lender has not called withdraw(),Unsatisfactory,,57
validation-647,Lack of circuit-breaker check in `PriceFeed.sol`,No longer needed per Chainlink,Unsatisfactory,,57
validation-599,Credit positions with cash less than ```minimumCreditBorrowAToken``` and credit more than ```minimumCreditBorrowAToken``` will not be created while they should,params.amount as cash not catered for,Satisfactory,"https://github.com/SizeCredit/size-solidity/blob/539d14d06919830d07413ab04d3cd0a33740fc33/src/libraries/actions/BuyCreditMarket.sol#L91-L93, https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/SellCreditMarket.sol#L93",57
validation-436,Centralization Risk for trusted owners in NonTransferrableScaledToken.sol,Centralization should be addressed in QA,Unsatisfactory,,57
validation-405,Lenders might capitalize on more borrow token that they're entitled to during significant liquidity index changes,Unatructured proof,Unsatisfactory,,57
validation-393,Borrow offer can be used more than once to significantly decrease borrower collateral ratio,Intended design. Known Solidified issue 7. Infeasible in the context after all,Unsatisfactory,,57
validation-345,CreditSellers are not charged the swapFee for receiving cash when their SellCredit LimitOrders are filled by a liquidation with replacement,Intended design,Unsatisfactory,,57
validation-22,"The validation in `validateMinimumCredit` function is incorrect, which will result in  the credit amount after reduced below the minimum credit",Catchy (0 < 0) == false,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/main/src/libraries/RiskLibrary.sol#L17-L25,57
validation-609,Liquidate doesn't always increase the sender collaterals as per LIQUIDATE_01 invariant,"Invalid assumptions. Self liquidation concerns the lender, NOT the borrower",Unsatisfactory,,58
validation-363,Incorrect Minimum credit Check in `validateBuyCreditMarket`,params.amount as cash not catered for,Satisfactory,"https://github.com/SizeCredit/size-solidity/blob/539d14d06919830d07413ab04d3cd0a33740fc33/src/libraries/actions/BuyCreditMarket.sol#L91-L93, https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/SellCreditMarket.sol#L93",58
validation-325,Borrower overpays interest due to incorrect inclusion of fragmentation fee in credit calculation,fragmentationFee is paid by whoever causes the fragmentation,Unsatisfactory,,58
validation-148,Borrowers can deny lenders that are trying to early exit a position,Intended design,Unsatisfactory,,58
validation-100,CreditPosition is forsale immediately after created ,Intended design. Known Solidified issue 7,Unsatisfactory,,58
findings-109,"Unhealthy borrower is able to ""withdraw"" most of his borrow tokens",Incorrect assumptions. Wouldn't click,Unsatisfactory,,58
validation-730,`executeBuyCreditMarket()` returns incorrect value for liquidity availability control ,Insufficient proof alleging the flaw,Unsatisfactory,,59
validation-712,The Market Maker does not pay the `swapFee` and it is the taker who pays the `swapFee` in the `executeBuyCreditMarket` function,Intended design,Unsatisfactory,,59
validation-685,Whales can force overDue liquidation via block stuffing,Intended design. Known Solidified issue 7,Unsatisfactory,,59
validation-594,Incorrect ```liquidatorReward``` calculation due to using ```debtPosition.futureValue``` instead of ```debtInCollateralToken```.,18 decimal debtInCollateralToken NOT used,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L96-L99,59
validation-550,AccountingLibrary::getCreditAmountIn ensures that borrowers end up paying more for fragmentation than specified in fee config ,fragmentationFee is paid by whoever causes the fragmentation,Unsatisfactory,,59
validation-547,`getCreditAmountIn` returns lower fees than expected,Likely incorrect fee calculation,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/main/src/libraries/AccountingLibrary.sol#L228-L263,59
validation-502,Borrower can make liquidation unprofitable for legitimate loans,Invalid assumptions and insufficient proof,Unsatisfactory,,59
validation-501,Borrower can make liquidation unprofitable for legitimate loans,Invalid assumptions and insufficient proof,Unsatisfactory,,59
validation-493,Borrower can make liquidation unprofitable for legitimate loans,Invalid assumptions and insufficient proof,Unsatisfactory,,59
validation-492,Borrower can make liquidation unprofitable for legitimate loans,Invalid assumptions and insufficient proof,Unsatisfactory,,59
validation-448,Updating `crOpening` can block existing users from withdrawing,Invalid assumptions and insufficient proof,Unsatisfactory,,59
validation-240,Chainlink addresses/intervals should not be immutable,Known readme issue,Unsatisfactory,,59
validation-77,Vulnerabilities in `executeDeposit` Function Endanger Deposit Process,Insufficient proof alleging the flaw,Unsatisfactory,,59
findings-76,Compensating borrowers could bear unexpected fragmentation fees,Missing check for creditPositionWithDebtToRepay.credit > 0,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Compensate.sol#L146,59
findings-73,Overdue liquidations punish overcollaterized users,Flawed calculation affecting borrower with healthier collateral ratio status,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L90-L113,59
findings-35,`CapsLibrary.validateVariablePoolHasEnoughLiquidity()` always revert,Incorrect address reference,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/CapsLibrary.sol#L60-L75,59
validation-610, Malicious lenders can create buy credit limit orders without depositing any tokens into the protocol.,Coded POC inadequate alleging the flaw,Unsatisfactory,,60
validation-241,Grace period time is too much for after the sequencer comes back up and allows for accumulation of bad debt,Low QA on protocol set variable,Unsatisfactory,,60
validation-198,Deposit of ETH and USDC will not work together in multicall ,"Coded POC inadequate alleging the flaw. Also, not explaining why a need for depositing ETH and USDC in the same batch",Unsatisfactory,,60
validation-646,Missing Validation for `maxDueDate` Exceeding Maximum Tenor in `BuyCreditLimit` Library,Low QA on user input mistake,Unsatisfactory,,61
validation-626,Risk can be transferred forcefully to unwilling risk takers(borrowers who wants USDC).,Intended design. Known Solidified issue 7. Infeasible in the context after all,Unsatisfactory,,61
validation-543,Incorrect address was used to check whether the variable pool has enough liquidity ,Incorrect address reference,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/CapsLibrary.sol#L60-L75,61
validation-500,Inability to Compensate Positions with Less Than 1 Hour Remaining,Intended design of compensate(),Unsatisfactory,,62
validation-499,Inability to Compensate Positions with Less Than 1 Hour Remaining,Intended design of compensate(),Unsatisfactory,,62
validation-498,Inability to Compensate Positions with Less Than 1 Hour Remaining,Intended design of compensate(),Unsatisfactory,,62
validation-419,Liquidator cannot achieve proper liquidator reward as protocol promised,18 decimal debtInCollateralToken NOT used,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L96-L99,62
validation-642,`validateVariablePoolHasEnoughLiquidity` will always fail causing complete DOS to the protocol,Incorrect address reference,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/CapsLibrary.sol#L60-L75,63
validation-623,AccountingLibrary's `getCreditAmountIn()` overstates `creditAmountIn` for the given `cashAmountOut`,Likely incorrect fee calculation,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/main/src/libraries/AccountingLibrary.sol#L228-L263,63
validation-596,Malicious user can DoS every deposit of ```USDC``` at no cost by sandwiching it to not passing ```validateBorrowATokenCap``` check.,Intended design. Known Solidified issue 7. Infeasible in the context after all,Unsatisfactory,,63
validation-512,"Inside Multicall, wrong parameters passed into state.validateBorrowATokenIncreaseLteDebtTokenDecrease allows for unintended behaviour where total supply of borrowAtokens exceed borrowATokenCap despite not being for the purpose of decreasing debt",Invalid validation entailed,Satisfactory,"https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/Multicall.sol#L29, https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/Multicall.sol#L37",63
validation-477,Every borrower in Size can block the keeper from choosing them as a replacement borrower,Intended design,Unsatisfactory,,63
validation-458,Volatile cap on borrowOffers can lead to borrowers incurring more debt than expected,Intended design. Known Solidified issue 7. Infeasible in the context after all,Unsatisfactory,,63
validation-369,Ability to change the apr of the curve any time allow lenders and borrower to front run the actions.,Intended design. Known Solidified issue 7. ,Unsatisfactory,,63
validation-183,In `getAdjustedAPR` the APR will not be adjusted and it will revert,Informational on protocol controlled deploy script,Unsatisfactory,,63
validation-129,The calculation in the credit fractionalization situation may lead to manipulation of credit amount,Informational on protocol controlled/intended parameters,Unsatisfactory,,63
findings-152,Sandwich attack on loan fulfillment will temporarily prevent users from accessing their borrowed funds,Intended design. Inadequate elaboration alleging the exploit,Unsatisfactory,,63
findings-119,Improper Validation in the `BuyCreditMarket::validateBuyCreditMarket` Function Causes Incorrect Reverts When `params.exactAmountIn` is True resulting in an invariant break,params.amount as cash not catered for,Satisfactory,"https://github.com/SizeCredit/size-solidity/blob/539d14d06919830d07413ab04d3cd0a33740fc33/src/libraries/actions/BuyCreditMarket.sol#L91-L93, https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/SellCreditMarket.sol#L93",63
validation-303,Inadequate checks to confirm the correct status of the sequecnce/sequecncerUptimeFeed in `PriceFeed.getPrice()` contract. ,Known Chainlink readme issue,Unsatisfactory,,64
validation-269,[M-1] `Deposit::executeDeposit` uses `address(this).balance` which can lead to unintended financial operations,The user will be lucky with a foolish attacker then,Unsatisfactory,,64
validation-595,"Incomplete validation check in the [Claim::executeClaim], a lender can claim a token before its duedate of repayment without the borrower acknowledgement/approval",Inadequate proof alleging the flaw,Unsatisfactory,,65
validation-590,Users Can Steal ETH Balance with Minimum Investment,The user will be lucky with a foolish attacker then,Unsatisfactory,,65
validation-317,Liquidator minimum profit check can fail when liquidator fails to provide sufficient input,Low QA on user mistake,Unsatisfactory,,65
validation-307,Multicall Failure Due to Concurrent Collateral and Borrow Token Deposits in `Size::deposit(),Intended design to prevent batching of ETH and USDC,Unsatisfactory,,65
validation-233,The variablePoolBorrowRateStaleRateInterval is lack of zero check which can lead to DOS,Low on zero value check,Unsatisfactory,,65
findings-88,withdraw() users may can't withdraw underlyingBorrowToken properly,Intended design,Unsatisfactory,,65
validation-667,Round Completeness Check Omission in PriceFeed Contract,Known readme issue,Unsatisfactory,,66
validation-313,Lack of maxDueDate in borrow offers/limit-orders,Informational on current design,Unsatisfactory,,66
validation-243,No slippage checks when withdrawing tokens from the variable pool,Known readme issue,Unsatisfactory,,66
validation-648,`maxDueDate` is not checked against the `block.timestamp + state.riskConfig.maxTenor` value,Low QA on user input mistake,Unsatisfactory,,67
validation-592,Borrowers pay more credit than necessary,Likely incorrect fee calculation,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/main/src/libraries/AccountingLibrary.sol#L228-L263,67
validation-334,Borrow token supply cap can be bypassed using multicall,Invalid validation entailed,Satisfactory,"https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/Multicall.sol#L29, https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/Multicall.sol#L37",67
findings-142,A meaningless liquidity validation for a variable pool,Insufficient proof alleging the flaw,Unsatisfactory,,67
findings-4,Limit order offerers have little control over amounts they would borrow or lend,Intended design,Unsatisfactory,,67
validation-664,When calculating `creditAmountIn` and `creditAmountOut` the `interest rate` is applied on top of the `fragmentationFee`,fragmentationFee is paid by whoever causes the fragmentation,Unsatisfactory,,68
validation-627,"The decimals precision of the `priceFeed` is not handled in `collateralRatio()`, leading to potential wrong valuation ",Insufficient proof (lacking coded POC) alleging the flaw,Unsatisfactory,,68
validation-466,Fragmentation Fee not charged when a user incompletely compensate a credit position,Missing check for creditPositionWithDebtToRepay.credit > 0,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Compensate.sol#L146,68
validation-414,Incorrect cashAmount check for variable pool ability to fulfill withdrawal,Insufficient proof alleging the flaw,Unsatisfactory,,68
validation-352,"In `validateCompensate` there is wrong check that can approve transaction that will make right users not able to compensate, some borrowers to exploit protocol or some lenders not to claim their credit at expected due date",Intended design,Unsatisfactory,,68
validation-226,`liquidateWithReplacement` can be DoS by the borrower,Intended design. Known Solidified issue 7.,Unsatisfactory,,68
findings-155,BorrowOffers with high APR cause DOS in order to grief lenders,Low QA on orderbook spamming,Unsatisfactory,,68
findings-37,Use of `isMulticall` is unsafe for future contract upgrades without reentrancy protection,No actual scenario given,Unsatisfactory,,68
validation-694,The `SwapFee`  is accounted twice in the `AccountingLibrary.getCreditAmountIn` function,Likely incorrect fee calculation,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/main/src/libraries/AccountingLibrary.sol#L228-L263,69
validation-582,Liquidator reward is calculated wrongly ,18 decimal debtInCollateralToken NOT used,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L96-L99,69
validation-321,Lack of slippage control on minimum Borrow amount received can create undesirable debt positions for borrowers ,Admins are trusted. Known readme issue,Unsatisfactory,,69
validation-287,Insufficient check when updating crOpening,Invalid assumptions and insufficient proof,Unsatisfactory,,69
validation-150,Borrowers can avoid liquidations under certain conditions,Intended design contingent on market fluctuation,Unsatisfactory,,69
findings-57,"In `BuyCreditMarket.sol` and `SellCreditMarket.sol`, this constraint for minimum credit is higher than it should be.",params.amount as cash not catered for,Satisfactory,"https://github.com/SizeCredit/size-solidity/blob/539d14d06919830d07413ab04d3cd0a33740fc33/src/libraries/actions/BuyCreditMarket.sol#L91-L93, https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/SellCreditMarket.sol#L93",69
findings-33,Lender can be forced out of existing positions unwillingly if they have an open SELL LMT order,Intended design,Unsatisfactory,,69
validation-572,Lenders can set extremely high interest rate on loans. ,No borrower would bite on it then,Unsatisfactory,,70
validation-451,Liquidator Reward is calculated wrong due to incorrect comparison- Liquidation.sol,18 decimal debtInCollateralToken NOT used,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L96-L99,70
validation-365,"The Liquidate::liquidatorProfitCollateralToken function currently over-rewards liquidators due to combining collateral and borrow tokens, resulting in consistently high liquidator reward.",18 decimal debtInCollateralToken NOT used,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L96-L99,70
validation-361,Minimum credit check can lead to sell credit market dos,Admins are trusted,Unsatisfactory,,70
validation-359,Lenders can be front-runned while disabling forSale flag for a credit position,Intended design. Known Solidified issue 7,Unsatisfactory,,70
validation-318,fragmentationFee in compensate is not implemented correctly,Missing check for creditPositionWithDebtToRepay.credit > 0,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Compensate.sol#L146,70
validation-84,"Ether passed to  withdraw() function will be lost for the caller, can be stolen by other depositor",Low QA on user mistake,Unsatisfactory,,70
findings-151,Unfair calculation logic of protocol profit during liquidation,Flawed calculation affecting borrower with healthier collateral ratio status,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L90-L113,70
findings-134,latestRoundData() has no check for round completeness,Unneeded check,Unsatisfactory,,70
findings-107,Borrower is not able to compensate his lenders if he is underwater,Inadequate remediation for underwater borrowers,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/Size.sol#L250,70
findings-7,Incorrect validation in validateVariablePoolHasEnoughLiquidity will cause DoS of the protocol's major functions,Incorrect address reference,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/CapsLibrary.sol#L60-L75,70
validation-702,Discrepancy in the `swapFee` calculation during cash-for-credit operation,Likely incorrect fee calculation,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/main/src/libraries/AccountingLibrary.sol#L228-L263,71
validation-684,Inconsisstency in the way `sellCreditMarket()` and `buyCreditMarket()` handels the `validateVariablePoolHasEnoughLiquidity()` check,Insufficient proof alleging the flaw,Unsatisfactory,,71
validation-677,Delegatecall Vulnerability in Multicall Implementation,OZ Address will take care of it,Unsatisfactory,,71
validation-676,Incorrect APR Calculation for Exact Tenor Matches in Yield Curve Interpolation,Insufficient proof (lacking coded POC) alleging the flaw,Unsatisfactory,,71
validation-607,Fees are not taken from the issuanceValue in the liquidateWithReplacement function.,Intended design,Unsatisfactory,,71
validation-452,Lender/SelfLiquidator receives less collateral from borrower than expected.,Low inconsequential on flooring,Unsatisfactory,,71
validation-435,Centralization Risk for Trusted Owners in Size.sol,Centralization should be addressed in QA,Unsatisfactory,,71
validation-230,"YieldCurve accepts negative apr inputs, which can lead to sell/buyCreditLimit orders being able to get listed but possibly never gonna get fulfilled",aprs are associated with type uint256 array,Unsatisfactory,,71
validation-87,Muticall deposits entirely bypass the borrowAToken cap,Invalid validation entailed,Satisfactory,"https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/Multicall.sol#L29, https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/Multicall.sol#L37",71
findings-147,A user might repay the wrong borrower.,Refactoring needed to avoid mishap,Satisfactory,"https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/Size.sol#L229, https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Repay.sol#L33-L41",71
validation-670,Insufficient ETH handling in `executeDeposit` Function,The user will be lucky with a foolish attacker then,Unsatisfactory,,72
validation-441,Lenders must have valid BorrowOffer in order to sell their credit positions,Intended design,Unsatisfactory,,72
validation-255,Malicious borrower can prevent liquidations,Intended design. Known Solidified issue 7,Unsatisfactory,,72
validation-152,Users can avoid paying fragmentation fees,Missing check for creditPositionWithDebtToRepay.credit > 0,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Compensate.sol#L146,72
findings-140,`Liquidate.executeLiquidate()` calculates `collateralRemainderCap` incorrectly.,Flawed calculation affecting borrower with healthier collateral ratio status,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L90-L113,72
findings-68,NonTransferrableScaledToken is not ERC20 compliant - it does not correctly fire the `Transfer` event.,Emitted in parental _update(),Unsatisfactory,,72
validation-449,Wrong low and high tenors  (values in the x axis) are used to calculate the final apr,Insufficient proof (lacking coded POC) alleging the flaw,Unsatisfactory,,73
validation-390,borrower that get matched through `liquidateWithReplacement()` will unfairly get more Cash than he should.,Intended design,Unsatisfactory,,73
findings-128,"Swap fees calculation is inconsistent, producing different fees for essentially the same loans",Inconsistent swap fee charging,Satisfactory,"https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/BuyCreditMarket.sol#L156-L177, https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/SellCreditMarket.sol#L159-L182",73
findings-92,`amount` validations are incorrect for some `exactAmountIn` cases,params.amount as cash not catered for,Satisfactory,"https://github.com/SizeCredit/size-solidity/blob/539d14d06919830d07413ab04d3cd0a33740fc33/src/libraries/actions/BuyCreditMarket.sol#L91-L93, https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/SellCreditMarket.sol#L93",73
validation-699,Compensate with `RESERVED_ID` can be used for protocol DOS via slicing credit position where attacker is the borrower to the minimal allowed pieces,Missing check for creditPositionWithDebtToRepay.credit > 0,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Compensate.sol#L146,74
validation-463,Borrower can take the accrued Interest from the AAVE pool which is deserved by the thelender.,Lender will assuredly received accrued interest when withdrawing,Unsatisfactory,,74
validation-141,Incorrect calculation of the cap on the liquidation reward leads to loss of funds,18 decimal debtInCollateralToken NOT used,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L96-L99,74
findings-52,LiquidatorReward is incorrectly calculated,18 decimal debtInCollateralToken NOT used,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L96-L99,74
findings-46,`openingLimitBorrowCR` is Inadequate to Protect Borrowers from more Debt after Repayment or Liquidation,Seemingly known readme issue,Unsatisfactory,,74
validation-630,`isDebtPositionLiquidatable` doesn't account for fees,Fee should indeed be factored in pre-calculation,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/RiskLibrary.sol#L98-L115,75
validation-585,Liquidator receives a dust amount as a reward due to an incorrect calculation of the liquidatorProfitCollateralToken,18 decimal debtInCollateralToken NOT used,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L96-L99,75
validation-290,Insufficient validation of `maxDueDate` presents a risk for lenders allowing unintended 0% APR loans ,Low QA on user input mistake,Unsatisfactory,,75
validation-221,Users will not be able to withdraw their USDC in some cases,Intended and known issue,Unsatisfactory,,75
validation-197,Size can overestimate liquidity on borrowing and lending actions after Aave upgrades to v3.1,Known readme issue,Unsatisfactory,,75
findings-150,`executeCompensate()` doesn't charge the `fragmentationFee` for `RESERVED_ID`.,Missing check for creditPositionWithDebtToRepay.credit > 0,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Compensate.sol#L146,75
validation-711,"Due to wrong math, liquidation incentive is always a dust amount, exposing protocol to risk of insolvancy",18 decimal debtInCollateralToken NOT used,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L96-L99,76
validation-542,The `borrowATokenCap` limitation can be bypassed by depositing `USDC` through `Size#multicall()`,Invalid validation entailed,Satisfactory,"https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/Multicall.sol#L29, https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/Multicall.sol#L37",76
validation-496,Incorrect Compensate Event Emission,Low QA,Unsatisfactory,,76
validation-272,Incorrect computation of liquidator's reward,18 decimal debtInCollateralToken NOT used,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L96-L99,76
validation-30,Fixed hearbeat used for price validation is too stale for some tokens,Known readme issue,Unsatisfactory,,76
findings-144,The `borrowATokenCap` requirement doesn't work during a multicall.,Invalid validation entailed,Satisfactory,"https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/Multicall.sol#L29, https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/Multicall.sol#L37",76
findings-136,ChainlinkOracle will return the wrong price for asset if underlying aggregator hits minAnswer,No longer needed per Chainlink,Unsatisfactory,,76
findings-45,Wrong Liquidator Rewards Calculation,18 decimal debtInCollateralToken NOT used,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L96-L99,76
validation-527,borrowers can't use some credit positions to compensate their debt positions,Impractical proof on an intended design,Unsatisfactory,,77
validation-450,Lender cannot do exactAmountIn in case of buyCreditMarketOrder and seller cannot do cashAmountOut  in case of sellCreditMarketOrder,params.amount as cash not catered for,Satisfactory,"https://github.com/SizeCredit/size-solidity/blob/539d14d06919830d07413ab04d3cd0a33740fc33/src/libraries/actions/BuyCreditMarket.sol#L91-L93, https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/SellCreditMarket.sol#L93",77
validation-407,Normal `Liquidate` action incentives are too low due to decimals misshandling,18 decimal debtInCollateralToken NOT used,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L96-L99,77
findings-123,BuyCreditMarket and SellCreditMarket can revert despite using correct amount of credit that is more than minimumCreditBorrowAToken,params.amount as cash not catered for,Satisfactory,"https://github.com/SizeCredit/size-solidity/blob/539d14d06919830d07413ab04d3cd0a33740fc33/src/libraries/actions/BuyCreditMarket.sol#L91-L93, https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/SellCreditMarket.sol#L93",77
findings-115,Wrong math for splitting the collateral in `liquidate` leads to unfair liquidation for borrowers,18 decimal debtInCollateralToken NOT used,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L96-L99,77
validation-718,Liquidators can be front-runned ,Intended design. Known Solidified issue 7,Unsatisfactory,,78
validation-668,Unchecked Maximum Slippage in Liquidation Exposes Protocol to Market Manipulation and Disproportionate Gains for Whales,Intended design,Unsatisfactory,,78
findings-156,Malicious offers can significantly impact the usability of the protocol,Low QA on orderbook spamming. Unlikely to happen too,Unsatisfactory,,78
findings-38,Liquidator cannot deposit both USDC and WETH through multicall in same transaction if there is `msg.value` included,Inadequate elaboration on the needed use case,Unsatisfactory,,78
findings-8,take profit loss when users sell credit with existing credit,validateBuyCreditMarket() has minimum check in place before executeBuyCreditMarket() kicks in,Satisfactory,,78
validation-508,isMultiCall boolean value can be easily manipulated,No actual scenario given,Unsatisfactory,,79
findings-66,YieldCurveLibrary.sol#getAdjustedAPR does not check if variablePoolBorrowRate is non-zero.,Low QA on uninitialized variablePoolBorrowRate,Unsatisfactory,,79
validation-719,Liquidate sets `collateralRemainderCap` incorrectly as only overcollateralization part needs to be compared to the remainder,Flawed calculation affecting borrower with healthier collateral ratio status,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L90-L113,80
validation-617,Potential APR Manipulation and Variability Issues in `BuyCreditMarket` function,Intended design. Known Solidified issue 7,Unsatisfactory,,80
validation-587,Inaccurate Liquidatability Assessment Due to Omission of Protocol Fees,Fee should indeed be factored in pre-calculation,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/RiskLibrary.sol#L98-L115,80
validation-566,Unprofitable Liquidation for Small Loans Leads to Bad Debt,Illiquid dust debt,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L96-L100,80
validation-350,Wrong `liquidatorReward` in a profitable liquidation.,18 decimal debtInCollateralToken NOT used,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L96-L99,80
findings-83,executeLiquidate() miscalculation liquidatorReward,18 decimal debtInCollateralToken NOT used,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L96-L99,80
validation-645,Incorrect Validation of BuyCreditMarket,Inadequate coded POC alleging the flaw,Unsatisfactory,,81
validation-267,Borrower has no control over max loan amount,Inadequate coded POC alleging the flaw,Unsatisfactory,,81
findings-80,validateVariablePoolHasEnoughLiquidity() misuse liquidity,Incorrect address reference,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/CapsLibrary.sol#L60-L75,81
validation-455,Lender is not allowed to take calculated Risk to avoid a huge selfLiquidation Loss - Buy/SellCreditMarketOrder,Inadequate proof alleging the flaw,Unsatisfactory,,82
findings-117,Picking a second borrower with 0 APR when calling the `liquidateWithReplacement` by bots leads to no profit for the protocol,Low QA on admin controlled call,Unsatisfactory,,82
findings-105,The borrower can `compensate` their debt using credit with soon-to-be-liquidatable debt,Intended design,Unsatisfactory,,82
findings-27,Borrow aToken cap can be bypassed by depositing via multicall,Invalid validation entailed,Satisfactory,"https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/Multicall.sol#L29, https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/Multicall.sol#L37",82
findings-25,"Pausing prevents debt repayment, leading to immediate liquidation if the debt is overdue when unpaused.", Overdue liquidations not catered for,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/main/src/libraries/LoanLibrary.sol#L135-L137,82
findings-10,Fragmentation fee is not taken if user compensates with newly created position,Missing check for creditPositionWithDebtToRepay.credit > 0,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Compensate.sol#L146,82
validation-708,Any existing loan can be bought by anyone,Intended design. Known Solidified issue 7,Unsatisfactory,,83
validation-454,Updated tenor range is not being used to validate before creating new credit-debt Position. - Buy/SellCreditMarketOrder and Compensate,Insufficient proof alleging the flaw while admins are trusted on updating new parameters,Unsatisfactory,,83
validation-336,"During profitable liquidations, under certain conditions the fee for the protocol can be 0",18 decimal debtInCollateralToken NOT used,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L96-L99,83
findings-16,`validateSellCreditMarket` and `validateBuyCreditMarket` incorrectly assumes `params.amount` is credit when validating against `minimumCreditBorrowAToken`,params.amount as cash not catered for,Satisfactory,"https://github.com/SizeCredit/size-solidity/blob/539d14d06919830d07413ab04d3cd0a33740fc33/src/libraries/actions/BuyCreditMarket.sol#L91-L93, https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/SellCreditMarket.sol#L93",83
validation-292,Borrower can set openingLimitBorrowCR to max to make BuyCreditMarket order always revert,Intended design. Known Solidified issue 7,Unsatisfactory,,84
validation-239,`Deposit#executeDeposit()` expects msg.value but is not marked as payable,It's marked payable in Size.col,Unsatisfactory,,84
validation-634,Possible Re-Entrancy in `repay::executearepay` leading to exploitable cases by a malicious user,Low CEI frequently reported by the bots. Invalid assumtions too,Unsatisfactory,,85
validation-633,Possible Re-Entrancy in `repay::executearepay` leading to exploitable cases by a malicious user,Low CEI frequently reported by the bots. Invalid assumtions too,Unsatisfactory,,85
validation-556,`borrowATokenCap` can be avoided by using the `Multicall` function,Invalid validation entailed,Satisfactory,"https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/Multicall.sol#L29, https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/Multicall.sol#L37",85
validation-516,H-01 buyCreditMarket() results in a lender losing funds due to buying a portion of a small credit,Inadequate coded POC alleging the flaw,Unsatisfactory,,85
validation-430,Liquidator can take away protocol's earn during liquidation with replacement borrower.,Size.sol#liquidateWithReplacement is protocol controlled,Unsatisfactory,,85
validation-333,Malicious user can DoS other users' deposits,Intended design. Known Solidified issue 7. Infeasible in the context after all,Unsatisfactory,,85
validation-328,Loans are undervalued in `buyCreditMarket()` due to wrong rounding,Low inconsequential,Unsatisfactory,,85
findings-118,Loss of fees for the `feeRecipient` in case of selling credit market,Missing residual fee collection,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/AccountingLibrary.sol#L249,85
findings-58,Underwater users are not allowed to use `compensate()` to repay debts,Inadequate remediation for underwater borrowers,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/Size.sol#L250,85
validation-720,User can split a credit into multiple credits without paying fragmentation fee,Missing check for creditPositionWithDebtToRepay.credit > 0,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Compensate.sol#L146,86
validation-715,The rewards assigned to the Liquidators are insignificant (almost non-existing),18 decimal debtInCollateralToken NOT used,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L96-L99,86
validation-319,Unexpected reverts or no incentives during liquidation due to wrong liquidatorReward calculation.,18 decimal debtInCollateralToken NOT used,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L96-L99,86
findings-110,liquidatorReward is calculated with the wrong token leading to incorrect amount of funds being sent to the liquidator,18 decimal debtInCollateralToken NOT used,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L96-L99,86
findings-108,"Credit value stops growing when the debt is overdue, causing a loss for the lender.",Intended design justifying oeverdue loan being liquidable,Unsatisfactory,,86
findings-99,The borrowers cannot withdraw the borrowed USDC because there is no upper limit on the borrowing amount,Intended design,Unsatisfactory,,86
validation-525,Overdue or underwater positions may become unliquidatable if there are not enough borrowATokens to repay lenders.,Known readme issue,Unsatisfactory,,87
validation-460,MaxDueDate of the LoanOffer is not checked while an existing creditPosition is bought-  BuyCreditMarket,Low QA on user input mistake,Unsatisfactory,,87
validation-306,DoS in BuyCreditMarket() due to incorrect configuration of minimumCreditBorrowAToken,Already commented as N/A,Unsatisfactory,,87
validation-121,deposit `underlyingBorrowToken` can be DoS,Intended design. Known Solidified issue 7. Infeasible in the context after all,Unsatisfactory,,87
findings-131,If the executeBuyCreditMarket function and executeSellCreditMarket function generate a credit split during execution without charging a fragmentation fee,fragmentationFee is paid by whoever causes the fragmentation,Unsatisfactory,,87
findings-36,Insufficient Liquidity Check on AAVE Variable Pool for multiple pending borrowers,Insufficient proof alleging the flaw,Unsatisfactory,,87
validation-568,Incorrect calculation for liquidatorReward in executeLiquidate function,18 decimal debtInCollateralToken NOT used,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L96-L99,88
validation-534,"Users Can Place Offers That Are Never Collateralized, Leading to Many Dirty Orders in the Order Book",Low QA on spamming,Unsatisfactory,,88
validation-326,Hardcoding aave pool address is a serious aave integration flaw because valid pool addresses can change.,Similar to known readme on Chainlink configuration,Unsatisfactory,,88
validation-215,Overdue positions that are well collateralized will suffer greater losses than expected,Flawed calculation affecting borrower with healthier collateral ratio status,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L90-L113,88
validation-191, `executeLiquidate()` liquidaterReward is totally underestimated because the computation computes `futureValue` as 6 decimals,18 decimal debtInCollateralToken NOT used,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L96-L99,88
validation-90,"using Contract's native token balance does not provide any guard in Multicall, hence will revert",Inadequate proof alleging the flaw as well as the need for such crafted batch,Unsatisfactory,,88
validation-47,DoS on market order with `creditPositionId != RESERVED_ID` by front-run compensating the credit position with `creditPositionToCompensateId = RESERVED_ID` and `amount = type(uint256).max`,Intended design. Known Solidified issue 7. Infeasible in the context after all,Unsatisfactory,,88
validation-554,Decimal error in calculation of the liquidator's reward,18 decimal debtInCollateralToken NOT used,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L96-L99,89
validation-459,Liquidator will be grieved if he provides minimumCollateralProfit as 0.,Low QA on user mistake,Unsatisfactory,,89
validation-347,Liquidator's reward are wrongly computed because they are not converted to its value worth in collateral.,18 decimal debtInCollateralToken NOT used,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L96-L99,89
findings-39,`LiquidateWithReplacement` not take fee on new borrower,Intended design,Unsatisfactory,,89
findings-26,Lender USDC reward is not converted to collateral token,18 decimal debtInCollateralToken NOT used,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L96-L99,89
validation-727,It's possible to manipulate new credit position `forSale` flag via `createCreditPosition()`,forSale leak,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Compensate.sol#L118-L145,90
validation-461,Incorrect calculation of fees lead to protocols Loss - sellCreditMarketOrder.,Likely incorrect fee calculation,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/main/src/libraries/AccountingLibrary.sol#L228-L263,90
findings-53,LiquidateWithReplacement does not charge swap fees on the borrower,Intended design,Unsatisfactory,,90
findings-42,Repay do not check debt position already moved to another borrower or belong to `msg.sender`,Refactoring needed to avoid mishap,Satisfactory,"https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/Size.sol#L229, https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Repay.sol#L33-L41",90
validation-586,"Some liquidations are not properly incentivized due to gas prices exceeding liquidation rewards, especially on Ethereum mainnet",Low QA and informational,Unsatisfactory,,91
validation-551,Wrong liquidity checking lead to token being stuck,Incorrect address reference,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/CapsLibrary.sol#L60-L75,91
validation-510,"The accidental input of `state.data.underlyingBorrowToken.decimals()` instead of `state.data.underlyingCollateralToken.decimals()` in the `AccountingLibrary::debtTokenAmountToCollateralTokenAmount` function leads to unprofitable liquidations being mistakenly counted as profitable, causing the protocol to charge fees incorrectly and disrupting the liquidation process.",Insufficient proof (lacking coded POC) alleging the flaw,Unsatisfactory,,91
validation-413,Credit seller(lender early exit) could be instead made to borrow unexpectedly due to offer being the same as borrower's offer.,Intended design,Unsatisfactory,,91
validation-357,credit positions marked not for sale can be sold. ,Inadequate check that backfires,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/SellCreditMarket.sol#L51,91
validation-354,Borrowers can DoS Lenders from Selling Credit from their Existing CreditPositions by compensating the CreditPosition been sold,forSale leak,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Compensate.sol#L118-L145,91
validation-344,Incorrect validation to determine if the liquidator receives the requested minimum profit for executing the validation.,Low QA on user mistake,Unsatisfactory,,91
validation-341,Rounding on profitable liquidations beneffits the Liquidator at the expense of the Borrower and the Protocol,Low and inconsequential,Unsatisfactory,,91
validation-280,borrowATokenCap can be bypassed through multicall(),Invalid validation entailed,Satisfactory,"https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/Multicall.sol#L29, https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/Multicall.sol#L37",91
validation-74, Re-Entrancy Vulnerability in repayDebt Function,Low CEI frequently reported by the bots. Invalid assumtions too,Unsatisfactory,,91
validation-631,Borrow Token Withdrawals Blocked Due to Incorrect Opening Collateral Ratio Check,Intended and known issue,Unsatisfactory,,92
validation-505,"Due to wrong calculation of liquidator Reward, unexpected financial Loss of Protocol fee Recipient and Borrower is happening during Liquidation.",18 decimal debtInCollateralToken NOT used,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L96-L99,92
findings-90,The `szaUSDC` token and `USDC` token do not have a strict 1:1 conversion ratio,The protocol does not support rebasing/fee-on-transfer tokens,Unsatisfactory,,92
findings-61,"Anyone can call the `claim()` function to claim credit for the lender, which increases the lender's borrowAToken and may cause them to lend more tokens than expected.",Insufficient proof alleging claimed amount is available for borrow without lender's control,Unsatisfactory,,92
validation-705,Rounding issue in `getCreditPositionProRataAssignedCollateral` calculation.,Low inconsequential,Unsatisfactory,,93
validation-535,"Loan and Borrow Offers Are Not Being Reset After the User Deposit Has Been Used, Leaving Stale Orders on the Order Book.",Inadequate coded POC alleging the flaw,Unsatisfactory,,93
validation-503,Ordinary liquidations can become unprofitable as expiration time cannot be set,Known readme issue,Unsatisfactory,,93
validation-480,`liquidatorReward` computation use `debtPosition.futureValue` in place of `debtInCollateralToken` in `Liquidate.sol`,18 decimal debtInCollateralToken NOT used,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L96-L99,93
validation-281,"When liquidateWithReplacement is called, the new borrower does not pay the swapFee ",Intended design,Unsatisfactory,,93
validation-238,Inability to perform partial liquidations allows huge positions to accrue bad debt in the system,Likely whale impedence,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L118,93
findings-138,`AccountingLibrary.getCreditAmountIn()` calculates swap fees incorrectly.,Inconsistent swap fee charging,Satisfactory,"https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/BuyCreditMarket.sol#L156-L177, https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/SellCreditMarket.sol#L159-L182",93
validation-669,Lack of Slippage Protection in Deposit Functions,Known readme issue,Unsatisfactory,,94
validation-517,User Unable To Partially Repay Debt To Avoid Liquidation,Inadequate remediation for underwater borrowers,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/Size.sol#L250,94
validation-385,"The `validateBorrowATokenCap()` restriction in `deposit()` can be easily bypassed by wrapping it in a `multicall()` call, giving certain users an unfair advantage",Invalid validation entailed,Satisfactory,"https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/Multicall.sol#L29, https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/Multicall.sol#L37",94
validation-323,Incorrect liquidator reward calculation results in significant loss of reward,18 decimal debtInCollateralToken NOT used,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L96-L99,94
validation-249,AToken cap can be violated/bypassed through multicall,Invalid validation entailed,Satisfactory,"https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/Multicall.sol#L29, https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/Multicall.sol#L37",94
validation-245,sellCreditMarket only checks openingLimitBorrowCR when opening a new position,Intended desighn. New lender need beware,Unsatisfactory,,94
findings-114,Protocol is not usable due to incorrect aaveV3 liquidity check,Incorrect address reference,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/CapsLibrary.sol#L60-L75,94
findings-97,Wrong comparison of token values causes liquidator profit to be negligible,18 decimal debtInCollateralToken NOT used,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L96-L99,95
findings-96,"Using multicall functionality, one can bypass the deposit cap even without reducing debt",Invalid validation entailed,Satisfactory,"https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/Multicall.sol#L29, https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/Multicall.sol#L37",95
validation-714,`Size.sellCreditMarket(SellCreditMarketParams)` race condition can force many transaction to revert in normal circumstances,Intended design. Known Solidified issue 7. Infeasible in the context after all,Unsatisfactory,,96
validation-675,Potential Misconfiguration of PriceFeed Contract on BASE Mainnet L2,Known readme issue,Unsatisfactory,,96
validation-666,Incorrect ETH Deposit Amount Calculation in Deposit Library,The user will be lucky with a foolish attacker then,Unsatisfactory,,96
validation-120,`liquidateWithReplacement` and `buyCreditMarket` can be DoS in some cases,Intended design. Known Solidified issue 7. Infeasible in the context after all,Unsatisfactory,,96
findings-87,compensate() may increase the risk of lender,No guarantee new borrower is healthier,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Compensate.sol#L64-L89,96
validation-574,borrowATokenCap can be exceeded without adding value to the protocol.,Invalid validation entailed,Satisfactory,"https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/Multicall.sol#L29, https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/Multicall.sol#L37",97
validation-367,Deposits of underlying borrow token via multicall can go above the cap,Intended design. Known Solidified issue 7. Infeasible in the context after all,Unsatisfactory,,97
validation-282,The use of `block.timestamp` in calculating tenors and deadlines can lead to MEV exploitation,Infeasible in POS,Unsatisfactory,,97
validation-513,"The borrowAToken's scaling mechanism in `NonTransferrableScaledToken::transferFrom` by the LiquidityIndex through `getReserveNormalizedIncome`, introduces variability in token values via division or multiplication of the liquidity index, potentially affecting yield calculations within protocols.",Unatructured proof,Unsatisfactory,,98
validation-438,Overdue loans can't be partially repaid using `compensate`,Intended design,Unsatisfactory,,98
validation-380,"Compensate can be used to dump ""unwanted"" positions on unsuspecting lenders",Devoid of coded POC to allege the exploit,Unsatisfactory,,98
validation-229,"Liquidator would never see intended profit from liquidations, due to bad liquidatorReward calculation",18 decimal debtInCollateralToken NOT used,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L96-L99,98
validation-203,The method of calculate liquidator reward is incorrect,18 decimal debtInCollateralToken NOT used,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L96-L99,98
validation-195,Incorrect checked address in `CapsLibrary.validateVariablePoolHasEnoughLiquidity` causes critical functions to be in a DoS state,Incorrect address reference,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/CapsLibrary.sol#L60-L75,98
validation-192,User's collateral Can Be Infllated  With Just 1 wei,The user will be lucky with a foolish attacker then,Unsatisfactory,,98
validation-76,Liquidators have the choice to liquidate a different amount of positions under the same circumstances,Sporadic proof that has no practical mitigation on protocol design,Unsatisfactory,,98
findings-146,Possible revert of buying/selling 100% of credit markets.,buy/sell 100% of positions to avoid fragmentationFee not always possible,Satisfactory,"https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/BuyCreditMarket.sol#L162, https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/SellCreditMarket.sol#L175",98
findings-31,Strategic credit fragmentation by borrower can force lender to get liquidated on their borrow positions,fragmentationFee is paid by whoever causes the fragmentation,Unsatisfactory,,98
validation-657,Credit can be sold forcibly as `forSale` setting can be ignored via Compensate,forSale leak,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Compensate.sol#L118-L145,99
validation-562,Incorrect Validation of `Amount` in `sellCreditMarket` and `buyCreditMarket` Functions Causes A Revert On Valid Inputs,params.amount as cash not catered for,Satisfactory,"https://github.com/SizeCredit/size-solidity/blob/539d14d06919830d07413ab04d3cd0a33740fc33/src/libraries/actions/BuyCreditMarket.sol#L91-L93, https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/SellCreditMarket.sol#L93",99
validation-322,The `borrowAtoken` supply checks in `multicall()` are completely wrong,Invalid validation entailed,Satisfactory,"https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/Multicall.sol#L29, https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/Multicall.sol#L37",99
validation-262,"During liquidation, the higher the collateral ratio is, the more the loss of borrower is. ",Flawed calculation affecting borrower with healthier collateral ratio status,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L90-L113,99
validation-128,"Old borrowOffer lingering can affect all future newly acquired credit positions, leading to unintended transactions ",Intended design,Unsatisfactory,,99
validation-721,Withdraw can be DoSed by an attacker sending debt tokens to user's address,Intended and known issue,Unsatisfactory,,100
validation-580,H-02 createDebtAndCreditPositions() and createCreditPosition() may result in backrunning exploit of user's loanOffer,Intended design. Known Solidified issue 7,Unsatisfactory,,100
validation-488,Lenders can steal money from borrowers when market conditions are very volatile.,Intended design. Known Solidified issue 7.,Unsatisfactory,,100
validation-88,"Invalid CR validation in `Size::withdraw`, blocking liquidatable users from withdrawing their borrow tokens",Intended design on consolidated account,Unsatisfactory,,100
findings-116,"Exploit in `liquidateWithReplacement` allows bots to force lenders into repaying their own loans, causing financial loss",Low QA on admin controlled call,Unsatisfactory,,100
findings-91,`multicall()` doesn't correctly enforce `borrowATokenCap`,Invalid validation entailed,Satisfactory,"https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/Multicall.sol#L29, https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/Multicall.sol#L37",100
findings-63,"The `compensate()` function can be frontrun, causing users to pay an unnecessary fragmentation fee.",fragmentationFee is paid by whoever causes the fragmentation,Unsatisfactory,,100
validation-483,`validateBuyCreditMarket` may revert incorrectly when `params.amount` is used as `cashAmountIn` value (`exactAmountIn == true`),params.amount as cash not catered for,Satisfactory,"https://github.com/SizeCredit/size-solidity/blob/539d14d06919830d07413ab04d3cd0a33740fc33/src/libraries/actions/BuyCreditMarket.sol#L91-L93, https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/SellCreditMarket.sol#L93",101
validation-482,`validateSellCreditMarket` may revert incorrectly when `params.amount` is used as `cashAmountOut/In` value (`exactAmountIn == false`,params.amount as cash not catered for,Satisfactory,"https://github.com/SizeCredit/size-solidity/blob/539d14d06919830d07413ab04d3cd0a33740fc33/src/libraries/actions/BuyCreditMarket.sol#L91-L93, https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/SellCreditMarket.sol#L93",101
validation-481,An attacker can force a sellCreditMarket/buyCreditMarket call to match with a non-optimal offer by front-running the victim,Intended design. Known Solidified issue 7.,Unsatisfactory,,101
validation-368,"The `validateVariablePoolHasEnoughLiquidity()` check can be bypassed, giving certain users an unfair advantage",Incorrect address reference featuring a sandwich attack,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/CapsLibrary.sol#L60-L75,101
findings-78,Users cannot eliminate the liquidation risk when the CR falls below the liquidation CR by repaying partially,Inadequate remediation for underwater borrowers,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/Size.sol#L250,101
findings-41,`LiquidateWithReplacement` Fails to Reduce Liquidator Costs and have no benefit over standard `Liquidation` call,liquidatorProfit in borrow tokens not catered for,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/LiquidateWithReplacement.sol#L120-L163,101
findings-6,Multicall incorrectly validates borrow token supply cap,Invalid validation entailed,Satisfactory,"https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/Multicall.sol#L29, https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/Multicall.sol#L37",101
validation-629,Risk of Overpayment Due to Race Condition Between repay and liquidateWithReplacement Transactions,Refactoring needed to avoid mishap,Satisfactory,"https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/Size.sol#L229, https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Repay.sol#L33-L41",102
validation-541,Lenders are not getting interest from AAVE when claiming,They will be when withdrawing,Unsatisfactory,,102
validation-289,It's possible to swap credit without payng fees ,Low QA on dust amount entailed,Unsatisfactory,,102
validation-147,Wrong unscale could lead to stuck amount,Incorrect assumptions,Unsatisfactory,,102
validation-445,Wrong calculation of `fees` in `SellCreditMarket` when `params.exactAmountIn == false` and `params.creditPositionId != RESERVED_ID`,Likely incorrect fee calculation,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/main/src/libraries/AccountingLibrary.sol#L228-L263,104
validation-665,Incorrect Fee Calculation in Credit Fractionalization Scenario,fragmentationFee is paid by whoever causes the fragmentation,Unsatisfactory,,105
validation-181,Bad stale borrowRate check could lead to borrow/lend at unexpected rate,Incorrect assumptions and perceptions,Unsatisfactory,,105
validation-124,Lender has to have a borrowOffer to exit early,Intended design,Unsatisfactory,,105
findings-71,The borrower can borrow USDC without a swap fee,Intended design,Unsatisfactory,,105
validation-375,Lender always can DoS a Lender trying to exit credit early.,Intended design,Unsatisfactory,,106
validation-95,Fragmentation fees aren't being paid in the context of partial repayment in `Size::compensate`,Missing check for creditPositionWithDebtToRepay.credit > 0,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Compensate.sol#L146,106
validation-46,Incorrect calculation of liquidator reward in Liquidate.sol leads to failed liquidations,18 decimal debtInCollateralToken NOT used,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L96-L99,106
findings-102,Users cannot make compensation when the due date is within the minimum tenor period,Inadequate remediation for underwater borrowers,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/Size.sol#L250,106
validation-697,`Size.buyCreditMarket(BuyCreditMarketParams)` race condition can force many transaction to revert in normal circumstances,Intended design. Known Solidified issue 7. Infeasible in the context after all,Unsatisfactory,,107
validation-654,Persistent Zero Profit for Protocol in Liquidation Events under Specific Market Conditions,18 decimal debtInCollateralToken NOT used,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L96-L99,107
validation-620,Post-execution validations in `size.buyCreditMarket()` could lead to DoS/State-Inconsistencies ,Low QA on current design,Unsatisfactory,,107
validation-559,Incorrect Liquidity Check in Variable Pool Disrupts Borrowing Operations,Incorrect address reference,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/CapsLibrary.sol#L60-L75,107
validation-291,Fragmentation fee is not applied during compensate if minting new credit.,Missing check for creditPositionWithDebtToRepay.credit > 0,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Compensate.sol#L146,107
validation-24,`multicall `Function Fails to Reset `isMulticall` Flag on Delegatecall Failure,No actual scenario given,Unsatisfactory,,107
validation-663,Inconsistent ETH Balance Handling in Multicall Deposits,Inadequate proof alleging the flaw,Unsatisfactory,,109
validation-208,"Bad amount validation could lead to DoS, when `buyCreditMarket` called",params.amount as cash not catered for,Satisfactory,"https://github.com/SizeCredit/size-solidity/blob/539d14d06919830d07413ab04d3cd0a33740fc33/src/libraries/actions/BuyCreditMarket.sol#L91-L93, https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/SellCreditMarket.sol#L93",109
findings-84,"borrowAToken and aToken rounds direction are not the same, which can cause multiple problems.",Low QA and inconsequential,Unsatisfactory,,109
validation-608,Incorrect ```creditAmountIn``` calculation in ```getCreditAmountIn``` function when users sells a portion of their ```CreditPosition```,Likely incorrect fee calculation,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/main/src/libraries/AccountingLibrary.sol#L228-L263,110
validation-682,Reorg Vulnerability in Contract Initialization Process,Low QA,Unsatisfactory,,111
validation-348,Rounding down when computing issuanceValue causes the new borrower to get less cash than what it would get for the same amount of Credit if his borrow offer would have been filled with a BuyCredit MarketOrder.,Inconsequential low issue,Unsatisfactory,,111
validation-604,Anyone can bypass ```validateBorrowATokenCap``` check and deposit over the limit calling ```deposit()``` from multicall,Coded POC inadequate alleging the flaw,Unsatisfactory,,112
validation-514,Incorrect Handling of Decimal Places in Liquidation Reward Calculation,18 decimal debtInCollateralToken NOT used,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L96-L99,112
validation-266,Min/max answers from the chainlink aggregators are not checked,No longer needed per Chainlink,Unsatisfactory,,112
findings-82,"validateCompensate() Missing check forSale, may be maliciously modified",Missing for sale check in compensate(),Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Compensate.sol#L42,112
validation-701,Users Can Buypass Borrow Token Cap via Manipulation of Debt Token Supply,Invalid validation entailed,Satisfactory,"https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/Multicall.sol#L29, https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/Multicall.sol#L37",113
validation-598,```validateVariablePoolHasEnoughLiquidity``` will always revert due to ```balanceOf``` check on wrong address,Incorrect address reference,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/CapsLibrary.sol#L60-L75,113
findings-100,"Repaying an underwater debt is dangerous, as the borrower could lose the repayment cash while still being liquidated if a `liquidateWithReplacement()` is executed before the `repay()`",Refactoring needed to avoid mishap,Satisfactory,"https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/Size.sol#L229, https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Repay.sol#L33-L41",113
findings-62,"In `Compensate.sol`, fragmentation fee is not charged when compensate amount is less than `creditPositionWithDebtToRepay.credit`.",Missing check for creditPositionWithDebtToRepay.credit > 0,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Compensate.sol#L146,113
validation-674,Insufficient Handling of Deviation Threshold for ETH/USD Price Feed on BASE L2,Known readme issue,Unsatisfactory,,114
validation-584,`liquidatorReward` calculated incorrectly resulting in liquidator receiving dust fees,18 decimal debtInCollateralToken NOT used,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L96-L99,114
validation-412,Liquidator reward is not calculated correctly,18 decimal debtInCollateralToken NOT used,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L96-L99,114
validation-250,The user can claim even if the leftover credit is lower than the minimumCreditBorrowAToken.,Catchy (0 < 0) == false,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/main/src/libraries/RiskLibrary.sol#L17-L25,114
validation-125,Lack of validation for `cashAmountIn` in `BuyCreditMarket` when `exactAmountIn == false` allows creating a loan with only `1 AToken` fee,params.amount as cash not catered for,Satisfactory,"https://github.com/SizeCredit/size-solidity/blob/539d14d06919830d07413ab04d3cd0a33740fc33/src/libraries/actions/BuyCreditMarket.sol#L91-L93, https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/SellCreditMarket.sol#L93",114
findings-85,"executeSellCreditMarket() when creditPositionId == RESERVED_ID , Incorrect calculation of fees",Inconsistent swap fee charging,Satisfactory,"https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/BuyCreditMarket.sol#L156-L177, https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/SellCreditMarket.sol#L159-L182",114
validation-679,borrowers face a loss when selling or buying credit by market,fragmentationFee is paid by whoever causes the fragmentation,Unsatisfactory,,115
validation-686,SellCreditMarket's incorrect maximum cash amount and credit calculations impose hidden fees on the borrower,DoS due to flawed limitation,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/BuyCreditMarket.sol#L162,116
validation-557,No Incentive for Liquidation Due to Incorrect Calculation of Liquidator Rewards,18 decimal debtInCollateralToken NOT used,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L96-L99,116
validation-391,Liquidator reward is incorrectly calculated during liquidation,18 decimal debtInCollateralToken NOT used,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L96-L99,116
validation-346,Users can scam other users when they match their loan ,Intended design. Known Solidified issue 7.,Unsatisfactory,,116
validation-123,Lack of validation for `cashAmountOut` in `SellCreditMarket` when `exactAmountIn == true` allows creating a loan without fee,params.amount as cash not catered for,Satisfactory,"https://github.com/SizeCredit/size-solidity/blob/539d14d06919830d07413ab04d3cd0a33740fc33/src/libraries/actions/BuyCreditMarket.sol#L91-L93, https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/SellCreditMarket.sol#L93",117
validation-44,Wrong calculation of `fees` in `SellCreditMarket` when `params.exactAmountIn == false` and `params.creditPositionId == RESERVED_ID`,Likely incorrect fee calculation,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/main/src/libraries/AccountingLibrary.sol#L228-L263,117
validation-722,AccountingLibrary's `getCashAmountOut()` inflates swap fee by using the wrong base,Likely incorrect fee calculation,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/main/src/libraries/AccountingLibrary.sol#L228-L263,118
validation-37,The total supply of borrowAToken can go over the specified cap,Invalid validation entailed,Satisfactory,"https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/Multicall.sol#L29, https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/Multicall.sol#L37",118
validation-320,Users could abuse `compensate()` to fragment creditPositions without paying any fragementation fee,Missing check for creditPositionWithDebtToRepay.credit > 0,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Compensate.sol#L146,119
validation-122, `asigneCollateral` variable is incorrectly rounding down,Low and inconsequential,Unsatisfactory,,119
findings-18,Users can bypass the borrowAToken cap check by using multicall,Invalid validation entailed,Satisfactory,"https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/Multicall.sol#L29, https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/Multicall.sol#L37",119
findings-17,Incorrectly using `futureValue` instead of `debtInCollateralToken` when calculating `liquidatorReward`,18 decimal debtInCollateralToken NOT used,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L96-L99,119
validation-456,Fragmentation Fee is not properly enforced on all credit splits during compensation,Missing check for creditPositionWithDebtToRepay.credit > 0,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Compensate.sol#L146,120
validation-353,Borrowers pay more credit than necessary due to incorrect calculations,Likely incorrect fee calculation,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/main/src/libraries/AccountingLibrary.sol#L228-L263,120
validation-540,Incorrect calculation of liquidation rewards results in all liquidations being profitless,18 decimal debtInCollateralToken NOT used,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L96-L99,122
validation-494,Aave Yield on Lender Credit Repayment Vulnerable to Griefing,Inconsequential as long as the lender has not called withdraw(),Unsatisfactory,,122
validation-340,Borrowers can fragmentate credit without paying the fragmentationFee when partially repaying a DebtPosition via Compensate,Missing check for creditPositionWithDebtToRepay.credit > 0,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Compensate.sol#L146,122
validation-116,Mismatch between the code and documentation could lead to DoS ,Low QA,Unsatisfactory,,122
validation-108,Users can not to buy/sell minimum credit allowed due to exactAmountIn condition,params.amount as cash not catered for,Satisfactory,"https://github.com/SizeCredit/size-solidity/blob/539d14d06919830d07413ab04d3cd0a33740fc33/src/libraries/actions/BuyCreditMarket.sol#L91-L93, https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/SellCreditMarket.sol#L93",122
validation-18,Inconsistent Intermediate Asset Check in PriceFeed Constructor Leading to Incorrect Price Calculations,Known readme issue,Unsatisfactory,,122
validation-628,Lack of Slippage Protection in `size.buyCreditMarket()` and `size.sellCreditMarket()` ,Known readme issue,Unsatisfactory,,123
validation-143,Borrower always can DoS a Lender trying to exit credit early.,Intended design,Unsatisfactory,,123
validation-138,Wrong check when `buyCreditMarket` is been called with `param.exactAmountIn` equal to true.,params.amount as cash not catered for,Satisfactory,"https://github.com/SizeCredit/size-solidity/blob/539d14d06919830d07413ab04d3cd0a33740fc33/src/libraries/actions/BuyCreditMarket.sol#L91-L93, https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/SellCreditMarket.sol#L93",123
findings-81,multicall() borrowATokenSupply amount wrong,Invalid validation entailed,Satisfactory,"https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/Multicall.sol#L29, https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/Multicall.sol#L37",123
findings-64,"When users buy existing credit via `BuyCreditMarket` and has `exactAmountIn == true`, it is nearly impossible for users to avoid paying fragmentation fee.",buy/sell 100% of positions to avoid fragmentationFee not always possible,Satisfactory,"https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/BuyCreditMarket.sol#L162, https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/SellCreditMarket.sol#L175",123
validation-728,Wrong calculation of futureValue of DebtPosition in simple lending & borrowing case,Low inconsequential,Unsatisfactory,,124
validation-545,DoS when trying to access the newly created debit & credit position,Devoid of coded POC to allege the exploit,Unsatisfactory,,124
validation-555, Uncharged Fragmentation Fees on Credit Splits on `Compnsate()` function Lead to Financial Losses for the Protocol,Missing check for creditPositionWithDebtToRepay.credit > 0,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Compensate.sol#L146,125
validation-68,Current design of the system makes it very hard for certain users to not get fragmented,buy/sell 100% of positions to avoid fragmentationFee not always possible,Satisfactory,"https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/BuyCreditMarket.sol#L162, https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/SellCreditMarket.sol#L175",125
validation-145,The `borrowATokenCap` can be bypassed,Invalid validation entailed,Satisfactory,"https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/Multicall.sol#L29, https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/Multicall.sol#L37",126
validation-579,"Credit positions can be bought instantly, which may lead to lenders losing funds",Intended design,Unsatisfactory,,127
validation-522,Lenders can cause a loss for Borrowers when they sell their credit positions,Intended design. Incorrect assumptions in this context,Unsatisfactory,,127
validation-257,Liquidator rewards are inflated.,18 decimal debtInCollateralToken NOT used,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L96-L99,127
validation-98,Malicious lenders can force borrowers into fragmenting their credit positions,Intended design. Incorrect assumptions in this context,Unsatisfactory,,127
validation-316,Liquidation reward is calculated incorrectly and will always be very low which presents no incentive for liquidators to liquidate underwater/overdue positions,18 decimal debtInCollateralToken NOT used,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L96-L99,128
validation-371,Users may incur an unexpected fragmentation fee in the `compensate()`  call,Missing check for creditPositionWithDebtToRepay.credit > 0 (Opposing scenario described),Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Compensate.sol#L146,129
validation-248,The validateUserIsNotBelowOpeningLimitBorrowCR in withdraw can lead to DOS,Intended and known issue,Unsatisfactory,,129
findings-86,"executeSellCreditMarket() when creditPositionId != RESERVED_ID , Incorrect calculation of fees",Inconsistent swap fee charging,Satisfactory,"https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/BuyCreditMarket.sol#L156-L177, https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/SellCreditMarket.sol#L159-L182",129
validation-426,Wrong calculations causes the borrowers to owe more credit than necessary,Likely incorrect fee calculation,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/main/src/libraries/AccountingLibrary.sol#L228-L263,130
validation-155,The `collateralRemainderCap`  is not the correct cap,Inadequate proof alleging the flaw,Unsatisfactory,,130
validation-70,"A borrower can force set other lender's credit position for sale, by calling compensate and passing `RESERVED ID`",forSale leak,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Compensate.sol#L118-L145,130
findings-65,"When users sell existing credit via `SellCreditMarket` and has `exactAmountIn == false`, it is nearly impossible for users to avoid paying fragmentation fee.",buy/sell 100% of positions to avoid fragmentationFee not always possible,Satisfactory,"https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/BuyCreditMarket.sol#L162, https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/SellCreditMarket.sol#L175",130
validation-296,depositing native eth and usdc in the same multicall will always revert,"Coded POC inadequate alleging the flaw. Also, not explaining why a neeed for depositing ETH and USDC in the same batch",Unsatisfactory,,131
validation-474,Malicious lender can take over other lender's position,Intended design. Known Solidified issue 7.,Unsatisfactory,,133
findings-59,"Malicious users can perform a grief attack by repaying a loan to themselves using multicall to deposit tokens, thereby exceeding the `borrowATokenCap`.",Invalid validation entailed,Satisfactory,"https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/Multicall.sol#L29, https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/Multicall.sol#L37",133
validation-588,"Borrowers who call `compensate()` with `RESERVED_ID` will never pay a fragmentation fee, despite being responsible for the fragmentation of credit",Missing check for creditPositionWithDebtToRepay.credit > 0,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Compensate.sol#L146,134
validation-462,Seller/Borrower is grieved by making him pay the swapFee for the fragmentionFees that goes to the protocol. - SellCreditMarketOrder.,Intended design,Unsatisfactory,,135
findings-34,User can bypass `RiskConfig.borrowATokenCap` limit up to 10x times using multicall. Leading to temporary DOS attack,Invalid validation entailed,Satisfactory,"https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/Multicall.sol#L29, https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/Multicall.sol#L37",135
findings-126,"In the Compensate function, splitting the original credit position through ""mining new credit"" will never charge a fragmentation fee",Missing check for creditPositionWithDebtToRepay.credit > 0,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Compensate.sol#L146,138
validation-552,It doesn't validate `variablePoolBorrowRateStaleRateInterval` when `Size#updateConfig()` is called to update `variablePoolBorrowRateStaleRateInterval`,Low on zero value check,Unsatisfactory,,139
findings-15,`executeBuyCreditMarket` returns the wrong amount of cash and overestimates the amount that needs to be checked in the variable pool,Insufficient proof alleging the flaw,Unsatisfactory,,139
validation-360,Size performs insufficient available liquidity check during `liquidateWithReplacement` calls,Seems valid with coded POC on an edge case,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/main/src/Size.sol#L229-L243,140
findings-125,Liquidator's reward is significantly lower than it should be,18 decimal debtInCollateralToken NOT used,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L96-L99,140
findings-14,Overestimating the credit amount when `buyCreditMarket` is executed due to not properly deducting the swap fee,Inconsistent swap fee charging,Satisfactory,"https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/BuyCreditMarket.sol#L156-L177, https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/SellCreditMarket.sol#L159-L182",140
validation-683,Lack of slippage control in market operations,Known readme issue,Unsatisfactory,,141
validation-471,"Attackers can steal repaid funds, by manipulating the ""liquidityIndex"".",Sporadic and inadequate coded proof that has no practical mitigation on protocol design,Unsatisfactory,,142
validation-159,"Because of a decimal issue, the liquidator gets next to nothing as a liquidation rewards when liquidating a borrow position",18 decimal debtInCollateralToken NOT used,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L96-L99,142
validation-432,`Fees` is calculated wrongly in `AccountingLibrary.sol#getCreditAmountIn()` function.,Likely incorrect fee calculation,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/main/src/libraries/AccountingLibrary.sol#L228-L263,143
validation-247,Bad tenor validation could lead to buy/sell position's credits at tenor below the limit,Insufficient proof alleging the flaw while admins are trusted on updating new parameters,Unsatisfactory,,143
findings-98,"Miscalculation of remaining collateral, protocol cut when liquidating overdue loans is too high",Flawed calculation affecting borrower with healthier collateral ratio status,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L90-L113,143
findings-24,No fragmentation fee is taken when `compensate` is performed using `RESERVED_ID`.,Missing check for creditPositionWithDebtToRepay.credit > 0,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Compensate.sol#L146,143
validation-570,There is a discrepancy in which party pays the fragmentation fee depending on whether buyMarketCredit or sellMarketCredit is used,fragmentationFee is paid by whoever causes the fragmentation,Unsatisfactory,,144
validation-42,Liquidators will never profit from liquidations,18 decimal debtInCollateralToken NOT used,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L96-L99,144
validation-324,Incorrect Reward Calculation in `executeLiquidate`,18 decimal debtInCollateralToken NOT used,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L96-L99,145
validation-309, Users Can Bypass `borrowATokenCap` Check Through `multicall` Due to Incorrect Validation,Invalid validation entailed,Satisfactory,"https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/Multicall.sol#L29, https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/Multicall.sol#L37",146
validation-485,"Partial repayment with debt/credit creation (compensation) will not charge fragmentation fee, allowing malicious actors to fragment a credit many times breaking invariant `FEES_01`",Missing check for creditPositionWithDebtToRepay.credit > 0,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Compensate.sol#L146,148
findings-21,Users won't liquidate positions because the logic used to calculate the liquidator's profit is incorrect,18 decimal debtInCollateralToken NOT used,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L96-L99,148
validation-297,Incorrect fee calculation in sellCreditMarket,Likely incorrect fee calculation,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/main/src/libraries/AccountingLibrary.sol#L228-L263,149
findings-56,Buying or selling an existing credit does not validate if the remaining tenor is in range,Inadequate validation leads to breaking a main invariant of the protocol,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/main/src/libraries/actions/BuyCreditMarket.sol#L51,151
validation-606,Wrong fee calculation when user sells his full ```CreditPosition``` calling ```sellCreditMarket()``` with ```exactAmountIn``` as false,Likely incorrect fee calculation,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/main/src/libraries/AccountingLibrary.sol#L228-L263,153
validation-484,`liquidatorReward` calculation is not correct,18 decimal debtInCollateralToken NOT used,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L96-L99,153
validation-65,Invalid comparison when computing the liquidator's reward in `executeLiquidate`,18 decimal debtInCollateralToken NOT used,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L96-L99,153
validation-79,"Invalid CR validation in `Size::compensate`, blocking users from compensating their loans",Violating intended invariant check,Unsatisfactory,,154
validation-196,"Size uses wrong source to query available liquidity on Aave, resulting in borrow and lend operations being bricked upon mainnet deployment",Incorrect address reference,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/CapsLibrary.sol#L60-L75,155
validation-710,BuyCreditMarket charges extra swap fees as AccountingLibrary's `getCashAmountIn()` and `getCreditAmountOut()` use incorrect base amount,Likely incorrect fee calculation,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/main/src/libraries/AccountingLibrary.sol#L228-L263,156
findings-79,Liquidator receive a smaller reward because `liquidatorReward` is the minimum between a `collateral` amount and a `borrowAToken` amount,18 decimal debtInCollateralToken NOT used,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L96-L99,156
validation-565,worng calculation of creditAmountIn in `sellCreditMarket` gives the borrower less `cashOut`,Likely incorrect fee calculation,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/main/src/libraries/AccountingLibrary.sol#L228-L263,157
validation-406,Users can skip the fragmentation fee through the `compensate()` action,Missing check for creditPositionWithDebtToRepay.credit > 0,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Compensate.sol#L146,157
findings-54,Swap fees are incorrectly calculated when selling credit as a whole when `exactAmountIn == false`.,Inconsistent swap fee charging,Satisfactory,"https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/BuyCreditMarket.sol#L156-L177, https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/SellCreditMarket.sol#L159-L182",157
validation-263,Lenders calling buyCreditMarket can be front-run by borrowers due to lack of Non-Zero check on minAPR,Intended design. Known Solidified issue 7.,Unsatisfactory,,159
findings-55,Swap fees are incorrectly calculated when selling partial credit when `exactAmountIn == false`.,Inconsistent swap fee charging,Satisfactory,"https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/BuyCreditMarket.sol#L156-L177, https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/SellCreditMarket.sol#L159-L182",163
validation-497,Incorrect Overdue Liquidation Protocol Fees Calculation,Flawed calculation affecting borrower with healthier collateral ratio status,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L90-L113,168
findings-113,Size liquidation bots might skip profitable liquidations due to the minimum collateral profit check.,liquidatorProfit in borrow tokens not catered for,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/LiquidateWithReplacement.sol#L147,168
findings-23,The protocol cannot collect the full fee when borrowers sell credit without a fragmentation fee.,Missing residual fee collection,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/AccountingLibrary.sol#L249,169
validation-374,Report on `CreateInitCodeSizeLimit` Issue and Potential Optimizations for the Size Protocol,Low QA,Unsatisfactory,,170
validation-258,Legitimate call with small cash out can be reverted.,params.amount as cash not catered for,Satisfactory,"https://github.com/SizeCredit/size-solidity/blob/539d14d06919830d07413ab04d3cd0a33740fc33/src/libraries/actions/BuyCreditMarket.sol#L91-L93, https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/SellCreditMarket.sol#L93",170
validation-440,still possible to take loans amounts below the riskConfig.minimumCreditBorrowAToken,Known readme issue. Admins are trusted,Unsatisfactory,,171
findings-19,"When the borrowAToken cap is reached, users may not always be able to repay their debt in some cases due to precision errors",Extremely edge case,Unsatisfactory,,174
findings-129,"User can transfer OVERDUE loans, when he isn't expected to and there are checks that try to prevent that",Intended design,Unsatisfactory,,182
validation-219,Lack of Penalty Fees for Overdue Repayments Leads to Increased Liquidations and Financial Risks,Overdue loans are liquidable. That's the penalty,Unsatisfactory,,184
validation-294,Borrower Gets Immediately Liquidated After Repayments Resume,Known readme issue,Unsatisfactory,,186
validation-404,Protocol swap fees accidentally sent to lender instead of the protocol due to wrong fees calculation in SellCreditMarket.,Likely incorrect fee calculation,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/main/src/libraries/AccountingLibrary.sol#L228-L263,187
validation-327,Incorrect swap fee calculation in SellCreditMarket leads to protocol receiving less than they should,Likely incorrect fee calculation,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/main/src/libraries/AccountingLibrary.sol#L228-L263,188
validation-658,"`borrowOffer` can be replaced by calling `sellCreditLimit`, so that `buyCreditMarket` and `LiquidateWithReplacement` can be bypassed.",Intended design. Known Solidified issue 7. Infeasible in the context after all,Unsatisfactory,,192
validation-66,Inconsistent fees in `sellCreditMarket` when passing amount as credit or cash,Likely incorrect fee calculation,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/main/src/libraries/AccountingLibrary.sol#L228-L263,194
findings-49,"Since the lender and borrower can be the same, BorrowATokenCap can be bypassed.",Invalid validation entailed,Satisfactory,"https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/Multicall.sol#L29, https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/Multicall.sol#L37",194
findings-20,No Fragmentation fees paid on credit fragmentation due to partial debt repayment,Missing check for creditPositionWithDebtToRepay.credit > 0,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Compensate.sol#L146,194
validation-358,Current liquidation mechanism can cause borrowers with multiple debt positions to lose collateral more than they should,Liquidation should be in descending size ,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/main/src/libraries/LoanLibrary.sol#L148-L161,198
validation-246,"Early repay may be front ran, by MEV for profit",Intended design. Known Solidified issue 7.,Unsatisfactory,,199
validation-378,Compensations can be used to artificially make a position overdue and avoid a larger protocol fee during liquidations under certain conditions,Devoid of coded POC to allege the exploit. Known Solidified issue 7. Infeasible in the context after all,Unsatisfactory,,203
validation-337,Size overcharges lender and overpays borrower during `sellCreditMarket` calls,Seems valid with coded POC,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/main/src/libraries/actions/SellCreditMarket.sol#L127-L202,203
findings-50,The protocol fails to collect the full fee accurately when there is a fragmentation fee,Missing residual fee collection,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/AccountingLibrary.sol#L249,205
validation-268,`CapsLibrary.sol#validateBorrowATokenIncreaseLteDebtTokenDecrease` uses wrong source of `borrowAToken` total supply rendering validation ineffective which allows anyone to bypass cap limit by deposit via `multicall`,Invalid validation entailed,Satisfactory,"https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/Multicall.sol#L29, https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/Multicall.sol#L37",206
validation-538,"When `sellCreditMarket()` is called to sell credit for a specific cash amount, the protocol might receive a lower swapping fee than expected.",Likely incorrect fee calculation,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/main/src/libraries/AccountingLibrary.sol#L228-L263,213
validation-232,Incorrect fee calculation in `AccountingLibrary.getCreditAmountIn` causing the protocol to receive a lower swap fee,Likely incorrect fee calculation,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/main/src/libraries/AccountingLibrary.sol#L228-L263,215
validation-137,"Protocol's liqiudation profit is fully relying on the loan's collateral remainder, forcing the protocol to earn inconsistent rewards when liquidating loans of same debt",Flawed calculation affecting borrower with healthier collateral ratio status,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L90-L113,216
findings-44,Lack of Borrower Protection: Borrower loss when borrow offer APR is higher than lend offer APR,Intended design. Borrowers be aware,Unsatisfactory,,217
findings-70,The collateral remainder cap is incorrectly calculated during liquidation,Flawed calculation affecting borrower with healthier collateral ratio status,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L90-L113,221
validation-392,Fragmentation fee can be avoided during debt compensation,Missing check for creditPositionWithDebtToRepay.credit > 0,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Compensate.sol#L146,223
validation-40,Incorrect Liquidation Logic Leading to Potential Financial Discrepancies and Unauthorized Access,Seemingly AI generated ,Unsatisfactory,,224
findings-12,Debt fragmentation via compensate can DOS liquidation attempts,fragmentationFee is paid by whoever causes the fragmentation,Unsatisfactory,,226
findings-95,Unhealthy borrowers can recover all collateral and avoid liquidation penalty via `Size::compensate`,Intended design as long as crLiquidation isn't hit,Unsatisfactory,,227
validation-377,Protocol fails to take fragmentation fee during credit fractionalization for every compensate call with params.creditPositionToCompensateId == RESERVED_ID.,Missing check for creditPositionWithDebtToRepay.credit > 0,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Compensate.sol#L146,232
validation-339,Charging more Credit than what it should be really charged to CreditSellers when Selling Credit with a market order for a specific amount of cash.,Likely incorrect fee calculation,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/main/src/libraries/AccountingLibrary.sol#L228-L263,232
findings-47,`SellCreditMarket` with non-ExactAmountIn calculate wrong credit for borrower,Incorrect assumptions,Unsatisfactory,,239
validation-403,Creation of valid loans will revert due to comparing a cash value with credit one,params.amount as cash not catered for,Satisfactory,"https://github.com/SizeCredit/size-solidity/blob/539d14d06919830d07413ab04d3cd0a33740fc33/src/libraries/actions/BuyCreditMarket.sol#L91-L93, https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/SellCreditMarket.sol#L93",245
validation-213,Errors in the calculation of the liquidator's reward result in the protocol not being able to correctly allocate the liquidation reward,18 decimal debtInCollateralToken NOT used,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Liquidate.sol#L96-L99,253
findings-13,The `borrowATokenCap` can be bypassed when `deposit` is called by using `multicall`.,Invalid validation entailed,Satisfactory,"https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/Multicall.sol#L29, https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/Multicall.sol#L37",254
findings-101,Bad actors can grief users by creating useless loans on their behalf via `Size::compensate`,Intended design as long as crLiquidation isn't hit,Unsatisfactory,,256
validation-335, Unbounded return data in external calls of `DepositTokenLibrary.sol` of can lead to excessive gas consumption and DoS,Low QA frequently reported by the bot,Unsatisfactory,,257
validation-544,Neither `sellCreditMarket‎()` nor `compensate‎()` checks whether the credit position to be sold is allowed for sale,Inadequate check that backfires,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/SellCreditMarket.sol#L51,269
validation-163,User could sell its credit without intention,Intended design. Known Solidified issue 7,Unsatisfactory,,290
findings-153,A rogue borrower can split the lender's credit position into multiple positions without paying fragmentation fees,Missing check for creditPositionWithDebtToRepay.credit > 0,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/8850e25fb088898e9cf86f9be1c401ad155bea86/src/libraries/actions/Compensate.sol#L146,300
validation-356,Non-functional Borrowing Mechanism Leads to Debt Accrual Without Fund Transfer,Known readme issue on the current design,Unsatisfactory,,304
findings-22,Users can avoid full liquidation by splitting up their debt,Back to square one with the split exploit,Unsatisfactory,,305
validation-615,`Multicall` Out-of-Gas Exploitation Enables Front-Running Attacks on Critical Protocol Functions and Can Cause Loss Of Funds,Low QA frequently reported by the bot,Unsatisfactory,,331
validation-396,"`Deposit` function allows blacklisted addresses to receive tokens and open positions, bypassing underlying token restrictions",Readme and commonly known issue,Unsatisfactory,,331
validation-548,"`SellCreditLimit` function allows blacklisted addresses to create borrow offers, bypassing USDC restrictions",Readme and commonly known issue,Unsatisfactory,,335
validation-64, Reentrancy Vulnerability in executeLiquidateWithReplacement Function,Inadequate coded POC to allege the exploit,Unsatisfactory,,344
validation-511,`LiquidateWithReplacement` function allows USDC blacklisted addresses to circumvent token-level restrictions through the Size protocol,Readme and commonly known issue,Unsatisfactory,,358
validation-231,`executeSellCreditMarket` function allows transfer of credit positions to blacklisted addresses,Readme and commonly known issue,Unsatisfactory,,382
validation-695,Multicall does not work as intended,Intended design as it would be when not using the batch calling,Unsatisfactory,,398
validation-475,"Users can pay less fees for the same amount of cash, protocol losses expected income",Likely incorrect fee calculation,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/main/src/libraries/AccountingLibrary.sol#L228-L263,434
validation-305,Incorrect calculation of swapFees in `getCreditAmountIn` function,Likely incorrect fee calculation,Satisfactory,https://github.com/code-423n4/2024-06-size/blob/main/src/libraries/AccountingLibrary.sol#L228-L263,467
validation-643,Market Fees Calculation Issue,Low QA on trivial diffFees entailed,Unsatisfactory,,1050